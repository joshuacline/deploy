::deploy v1.0 (C) Joshua Cline - All rights reserved
@ECHO OFF&&SETLOCAL ENABLEDELAYEDEXPANSION&&CHCP 437>NUL&&SET "ORIG_CD=%CD%"&&CD /D "%~DP0"&&TITLE deploy v1.0
Reg.exe query "HKU\S-1-5-19\Environment">NUL
IF NOT "%ERRORLEVEL%" EQU "0" ECHO.Right-Click ^& Run As Administrator&&PAUSE&&GOTO:CLEAN_EXIT
FOR /F "TOKENS=*" %%a in ('ECHO.%CD%') DO (SET "CAPS_SET=PROG_FOLDER"&&SET "CAPS_VAR=%%a"&&CALL:CAPS_SET)
SET "CHAR_STR=%PROG_FOLDER%"&&SET "CHAR_CHK= "&&CALL:CHAR_CHK
IF DEFINED CHAR_FLG ECHO.ERROR: Remove the space from the path or folder name, then launch again.&&PAUSE&&GOTO:CLEAN_EXIT
IF "%PROG_FOLDER%"=="%SYSTEMDRIVE%\WINDOWS\SYSTEM32" ECHO.ERROR: Invalid path or folder name. Relocate, then launch again.&&PAUSE&&GOTO:CLEAN_EXIT
FOR /F "TOKENS=1-9 DELIMS=\" %%a IN ("%PROG_FOLDER%") DO (IF "%%a\%%b\%%c"=="%SystemDrive%\WINDOWS\TEMP" SET "PATH_FAIL=1"
IF "%%a\%%b\%%d\%%e\%%f"=="%SystemDrive%\USERS\APPDATA\LOCAL\TEMP" SET "PATH_FAIL=1")
IF DEFINED PATH_FAIL ECHO.ERROR: This should not be run from a temp folder. Extract zip into a new folder, then launch again.&&PAUSE&&GOTO:CLEAN_EXIT
IF "%PROG_FOLDER%"=="X:\$" IF "%SystemDrive%"=="X:" SET "WINPE_BOOT=1"
FOR /F "TOKENS=1 DELIMS=: " %%a IN ('DISM') DO (IF "%%a"=="Examples" SET "LANG_PASS=1")
IF NOT DEFINED LANG_PASS ECHO.ERROR: Non-english host language/locale.&&GOTO:CLEAN_EXIT
IF NOT "%PROG_FOLDER%"=="X:\$" SET "PROG_MODE=PORTABLE"&&CALL:SETS_HANDLER&&GOTO:BASIC_CREATOR
IF "%PROG_FOLDER%"=="X:\$" IF NOT "%SystemDrive%"=="X:" ECHO.ERROR: Relocate to path other than X:\$.&&GOTO:CLEAN_EXIT
IF "%PROG_FOLDER%"=="X:\$" IF "%SystemDrive%"=="X:" SET "PROG_MODE=RAMDISK"&&CALL:HOST_AUTO&&CALL:SETS_HANDLER
REG.EXE DELETE "HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\MiniNT" /f>NUL 2>&1
GOTO:BASIC_MODE
:PAD_LINE
IF NOT DEFINED PAD_TYPE SET "PAD_TYPE=1"
IF NOT DEFINED ACC_COLOR SET "ACC_COLOR=6"
IF NOT DEFINED BTN_COLOR SET "BTN_COLOR=7"
IF NOT DEFINED TXT_COLOR SET "TXT_COLOR=0"
IF NOT DEFINED PAD_SIZE SET "PAD_SIZE=LARGE"
IF NOT DEFINED PAD_SEQ SET "PAD_SEQ=6666600000"
IF NOT DEFINED CHCP_OLD FOR /F "TOKENS=2 DELIMS=:" %%a IN ('CHCP') DO SET "CHCP_OLD=%%a"
FOR %%a in (1 2 3 4 5 6 7 8) DO (IF "%PAD_TYPE%"=="%%a" CHCP 65001 >NUL)
IF "%PAD_TYPE%"=="0" SET "PADX= "
IF "%PAD_TYPE%"=="1" SET "PADX=◌"
IF "%PAD_TYPE%"=="2" SET "PADX=○"
IF "%PAD_TYPE%"=="3" SET "PADX=●"
IF "%PAD_TYPE%"=="4" SET "PADX=□"
IF "%PAD_TYPE%"=="5" SET "PADX=■"
IF "%PAD_TYPE%"=="6" SET "PADX=░"
IF "%PAD_TYPE%"=="7" SET "PADX=▒"
IF "%PAD_TYPE%"=="8" SET "PADX=▓"
IF "%PAD_TYPE%"=="9" SET "PADX=~"
IF "%PAD_TYPE%"=="10" SET "PADX=="
IF "%PAD_TYPE%"=="11" SET "PADX=#"
CALL SET "#@=%%XLR%ACC_COLOR%%%"&&CALL SET "##=%%XLR%BTN_COLOR%%%"&&CALL SET "#$=%%XLR%TXT_COLOR%%%"&&IF "%PAD_TYPE%"=="0" ECHO.%#$%&&EXIT /B
SET "PAD_SEQX=%PAD_SEQ%"&&IF NOT "%PAD_SEQ%X"=="%PAD_SEQX%X" SET "XNTX=0"&&SET "XLRX="&&FOR /F "DELIMS=" %%G IN ('CMD.EXE /D /U /C ECHO.%PAD_SEQ%^| FIND /V ""') do (CALL SET "XLRX=%%G"&&CALL:COLOR_ASSIGN&&CALL SET /A XNTX+=1)
IF "%PAD_SIZE%"=="LARGE" SET "PAD_BLK=%PADX%%PADX%%PADX%%PADX%%PADX%%PADX%%PADX%%PADX%%PADX%%PADX%"
IF "%PAD_SIZE%"=="SMALL" SET "PAD_BLK=%#0%%PADX%%#1%%PADX%%#2%%PADX%%#3%%PADX%%#4%%PADX%%#5%%PADX%%#6%%PADX%%#7%%PADX%%#8%%PADX%%#9%%PADX%"
IF "%PAD_SIZE%"=="LARGE" ECHO.%#0%%PAD_BLK%%#1%%PAD_BLK%%#2%%PAD_BLK%%#3%%PAD_BLK%%#4%%PAD_BLK%%#5%%PAD_BLK%%#6%%PAD_BLK%%#$%
IF "%PAD_SIZE%"=="SMALL" ECHO.%PAD_BLK%%PAD_BLK%%PAD_BLK%%PAD_BLK%%PAD_BLK%%PAD_BLK%%PAD_BLK%%#$%
SET "#Z=%#$%"&&SET "#0=%#1%"&SET "#1=%#2%"&SET "#2=%#3%"&SET "#3=%#4%"&SET "#4=%#5%"&SET "#5=%#6%"&SET "#6=%#7%"&SET "#7=%#8%"&SET "#8=%#9%"&SET "#9=%#0%"&&SET "PAD_BLK="&&SET "PADX="&&SET "XLRX=%#$%"&&FOR %%a in (1 2 3 4 5 6 7 8) DO (IF "%PAD_TYPE%"=="%%a" CHCP %CHCP_OLD% >NUL)
EXIT /B
:COLOR_ASSIGN
IF DEFINED XNTX CALL SET "#%XNTX%=%%XLR%XLRX%%%"
EXIT /B
:BOXT1
SET "BOX=T1"&&GOTO:BOX_DISP
:BOXB1
SET "BOX=B1"&&GOTO:BOX_DISP
:BOXT2
SET "BOX=T2"&&GOTO:BOX_DISP
:BOXB2
SET "BOX=B2"&&GOTO:BOX_DISP
:BOX_DISP
IF "%PAD_BOX%"=="DISABLED" EXIT /B
IF NOT DEFINED CHCP_OLD FOR /F "TOKENS=2 DELIMS=:" %%a IN ('CHCP') DO SET "CHCP_OLD=%%a"
CHCP 65001 >NUL
IF "%BOX%"=="0" ECHO.%##%►                                                                    ◄%#$%
IF "%BOX%"=="T1" ECHO.%##%╭────────────────────────────────────────────────────────────────────╮%#$%
IF "%BOX%"=="B1" ECHO.%##%╰────────────────────────────────────────────────────────────────────╯%#$%
IF "%BOX%"=="T2" ECHO.%##%┌────────────────────────────────────────────────────────────────────┐%#$%
IF "%BOX%"=="B2" ECHO.%##%└────────────────────────────────────────────────────────────────────┘%#$%
SET "BOX="&&CHCP %CHCP_OLD% >NUL
EXIT /B
:BASIC_MODE
@ECHO OFF&&CLS&&CALL:SETS_HANDLER&&CALL:CLEAN&&CALL:FREE_CALC&&CALL:PAD_LINE&&CALL:BOXT1&&ECHO.                       deploy Recovery Environment&&ECHO.&&ECHO. (%##%1%#$%) Backup&&ECHO. (%##%2%#$%) Restore&&ECHO. (%##%3%#$%) Boot Creator&&ECHO. (%##%.%#$%) Change Boot Order&&ECHO.&&CALL:BOXB1&&CALL:PAD_LINE
IF DEFINED HOST_ERROR ECHO.  %XLR2%Disk Error%#$% UID %#@%%HOST_TARGET%%#$%&&CALL:PAD_LINE
ECHO. (%##%Q%#$%)uit  (%##%*%#$%) Settings                                      %#@%%FREE%GB%#$% Free&&CALL:PAD_LINE
CALL:MENU_SELECT
IF "%SELECT%"=="Q" GOTO:QUIT
IF DEFINED HOST_ERROR GOTO:BASIC_MODE
IF "%SELECT%"=="." CALL:BCD_MENU&SET "SELECT="
IF "%SELECT%"=="1" CALL:BASIC_BACKUP&SET "SELECT="
IF "%SELECT%"=="2" CALL:BASIC_RESTORE&SET "SELECT="
IF "%SELECT%"=="3" GOTO:BASIC_CREATOR&SET "SELECT="
IF "%SELECT%"=="*" GOTO:SETTINGS_MENU&SET "SELECT="
GOTO:BASIC_MODE
:BASIC_CREATOR
@ECHO OFF&&CLS&&CALL:SETS_HANDLER&&CALL:CLEAN&&CALL:FREE_CALC&&CALL:PAD_LINE&&CALL:BOXT1&&ECHO.                                 deploy&&ECHO.&&SET "SOURCE_LOCATION="&&FOR %%a in (A B C D E F G H I J K L N O P Q R S T U W Y Z) DO (IF EXIST "%%a:\sources\boot.wim" SET "SOURCE_LOCATION=%%a:\sources")
SET "BOOT_EXIST="&&IF EXIST "%BOOT_FOLDER%\BOOT.SAV" SET "BOOT_EXIST=1"
IF "%PROG_MODE%"=="RAMDISK" SET "BOOT_EXIST=1"
SET "WIM_EXIST="&&IF EXIST "%IMAGE_FOLDER%\*.WIM" SET "WIM_EXIST=1"
SET "VHDX_EXIST="&&IF EXIST "%IMAGE_FOLDER%\*.VHDX" SET "VHDX_EXIST=1"
SET "IMAGEPROC_GO="&&FOR %%a in (WIM_EXIST VHDX_EXIST) DO (IF DEFINED %%a SET "IMAGEPROC_GO=1")
SET "BOOTCREATE_GO="&&IF DEFINED BOOT_EXIST IF DEFINED VHDX_EXIST SET "BOOTCREATE_GO=1"
IF DEFINED SOURCE_LOCATION ECHO. (%##%-%#$%) Import Boot  %XLR5%Windows Installation Media Detected%#$%  Import WIM (%##%+%#$%)&&ECHO.
IF NOT DEFINED IMAGEPROC_GO ECHO.        %#@%Insert a Windows Disc/ISO to import installation media%#$%&&ECHO.
IF NOT DEFINED BOOT_EXIST ECHO.            %#@%Insert a Windows Disc/ISO to import boot media%#$%&&ECHO.
SET "MENUT0=  %#@%AVAILABLE WIMs/VHDXs:%#$%"&&SET "MENUT1= "
IF NOT EXIST "%IMAGE_FOLDER%\*.WIM" IF NOT EXIST "%IMAGE_FOLDER%\*.VHDX" SET "MENUT0="&&SET "MENUT1="
IF EXIST "%IMAGE_FOLDER%\*.WIM" SET "BLIST=WIM"&&CALL:FILE_LIST
IF EXIST "%IMAGE_FOLDER%\*.VHDX" SET "BLIST=VHDX"&&CALL:FILE_LIST
ECHO.&&CALL:BOXB1&&CALL:PAD_LINE
IF "%PROG_MODE%"=="RAMDISK" IF DEFINED IMAGEPROC_GO IF NOT DEFINED BOOTCREATE_GO ECHO.                               (%##%C%#$%)onvert&&CALL:PAD_LINE
IF "%PROG_MODE%"=="RAMDISK" IF DEFINED IMAGEPROC_GO IF DEFINED BOOTCREATE_GO ECHO.                           (%##%C%#$%)onvert   (%##%G%#$%)o^^!&&CALL:PAD_LINE
IF "%PROG_MODE%"=="PORTABLE" IF DEFINED IMAGEPROC_GO IF NOT DEFINED BOOTCREATE_GO ECHO. (%##%Q%#$%)uit  (%##%*%#$%) Settings          (%##%C%#$%)onvert                   %#@%%FREE%GB%#$% Free&&CALL:PAD_LINE
IF "%PROG_MODE%"=="PORTABLE" IF DEFINED IMAGEPROC_GO IF DEFINED BOOTCREATE_GO ECHO. (%##%Q%#$%)uit  (%##%*%#$%) Settings      (%##%C%#$%)onvert   (%##%G%#$%)o^^!               %#@%%FREE%GB%#$% Free&&CALL:PAD_LINE
IF "%PROG_MODE%"=="RAMDISK" CALL:PAD_PREV
CALL:MENU_SELECT
IF NOT DEFINED SELECT IF "%PROG_MODE%"=="RAMDISK" GOTO:BASIC_MODE
IF DEFINED HOST_ERROR IF "%PROG_MODE%"=="RAMDISK" GOTO:BASIC_MODE
IF "%SELECT%"=="Q" GOTO:QUIT
IF "%SELECT%"=="C" CALL:CONVERT_PROMPT&SET "SELECT="
IF "%SELECT%"=="+" IF DEFINED SOURCE_LOCATION CALL:SOURCE_IMPORT&SET "SELECT="
IF "%SELECT%"=="-" IF DEFINED SOURCE_LOCATION CALL:BOOT_IMPORT&SET "SELECT="
IF "%SELECT%"=="G" IF "%PROG_MODE%"=="RAMDISK" IF NOT EXIST "%BOOT_FOLDER%\boot.sav" CALL:BOOT_FETCH
IF "%SELECT%"=="G" IF EXIST "%BOOT_FOLDER%\boot.sav" CALL:CREATOR_PROMPT&SET "SELECT="
IF "%SELECT%"=="*" IF "%PROG_MODE%"=="PORTABLE" GOTO:SETTINGS_MENU
GOTO:BASIC_CREATOR
:CREATOR_PROMPT
SET "$VHDX=X"&&CALL:VHDX_CHECK
IF DEFINED ERROR EXIT /B
SET "QUERY_MSG=                         %XLR2%Select a disk to erase%#$%"&&CALL:DISK_MENU
IF DEFINED ERROR EXIT /B
CALL:CONFIRM
IF NOT "%CONFIRM%"=="X" EXIT /B
IF DEFINED DISK_NUMBER IF DEFINED DISK_TARGET CALL:BOOT_CREATOR_START&CALL:PAUSED
EXIT /B
:CONVERT_PROMPT
SET "MENUT0=                           Image Processing"&&SET "MENUT1= "&&SET "MENUT2=  %#@%AVAILABLE WIMs/VHDXs:%#$%"&&SET "MENUT3= "&&SET "MENUT4= ( %##%.%#$% ) File Operation"&&SET "MENUB0= "&&SET "PICK=CUST"&&SET "$FOLD0=%IMAGE_FOLDER%"&&SET "$FILT0=*.WIM *.VHDX"&&CALL:FILE_PICK
IF "%SELECT%"=="." SET "FILE_TYPE=IMAGE"&&CALL:BASIC_FILE&EXIT /B
IF NOT DEFINED $PICK EXIT /B
SET "CONVERT_EXT="&&FOR %%G in ("%$PICK%") DO (SET "CAPS_SET=CONVERT_EXT"&&SET "CAPS_VAR=%%~xG"&&CALL:CAPS_SET)
IF "%CONVERT_EXT%"==".WIM" GOTO:BASIC_RESTORE_X
IF "%CONVERT_EXT%"==".VHDX" GOTO:BASIC_BACKUP_X
EXIT /B
:BASIC_BACKUP
SET "MENUT0=                           Image Processing"&&SET "MENUT1= "&&SET "MENUT2=  %#@%AVAILABLE VHDXs:%#$%"&&SET "MENUT3= "&&SET "MENUT4= ( %##%.%#$% ) File Operation"&&SET "MENUB0= "&&SET "PICK=VHDX"&&CALL:FILE_PICK
IF "%SELECT%"=="." SET "FILE_TYPE=VHDX"&&CALL:BASIC_FILE&EXIT /B
IF NOT DEFINED $PICK EXIT /B
:BASIC_BACKUP_X
SET "VHDX_SOURCE=%$PICK_BODY%%$PICK_EXT%"
SET "SOURCE_TYPE=VHDX"&&SET "TARGET_TYPE=WIM"&&CALL:IMAGEPROC_TARGET
IF NOT DEFINED WIM_TARGET EXIT /B
IF EXIST "%IMAGE_FOLDER%\%WIM_TARGET%" ECHO.&&ECHO. %XLR4%ERROR:%#$% File already exists.&&EXIT /B
SET "WIM_INDEX=1"&&CALL:IMAGEPROC_START
EXIT /B
:BASIC_RESTORE
SET "MENUT0=                           Image Processing"&&SET "MENUT1= "&&SET "MENUT2=  %#@%AVAILABLE WIMs:%#$%"&&SET "MENUT3= "&&SET "MENUT4= ( %##%.%#$% ) File Operation"&&SET "MENUB0= "&&SET "PICK=WIM"&&CALL:FILE_PICK
IF "%SELECT%"=="." SET "FILE_TYPE=WIM"&&CALL:BASIC_FILE&EXIT /B
IF NOT DEFINED $PICK EXIT /B
:BASIC_RESTORE_X
SET "WIM_SOURCE=%$PICK_BODY%%$PICK_EXT%"
CALL:WIM_INDEX_MENU
IF DEFINED ERROR EXIT /B
SET "SOURCE_TYPE=WIM"&&SET "TARGET_TYPE=VHDX"&&CALL:IMAGEPROC_TARGET
IF NOT DEFINED VHDX_TARGET EXIT /B
IF EXIST "%IMAGE_FOLDER%\%VHDX_TARGET%" ECHO.&&ECHO. %XLR4%ERROR:%#$% File already exists.&&EXIT /B
CALL:IMAGEPROC_VSIZE
IF DEFINED ERROR EXIT /B
CALL:IMAGEPROC_START
EXIT /B
:IMAGEPROC_START
SET "ERROR="&&SET "VHDX_MB=%VHDX_SIZE%"&&CLS&&CALL:BOXT2&&ECHO.         %#@%IMAGE PROCESSING START:%#$%  %DATE%  %TIME%
IF "%SOURCE_TYPE%"=="WIM" IF "%WIM_SOURCE%"=="SELECT" SET "ERROR=1"&&ECHO.&&ECHO.                          %XLR4%Source %SOURCE_TYPE% not set.%#$%
IF "%SOURCE_TYPE%"=="VHDX" IF "%VHDX_SOURCE%"=="SELECT" SET "ERROR=1"&&ECHO.&&ECHO.                          %XLR4%Source %SOURCE_TYPE% not set.%#$%
IF "%TARGET_TYPE%"=="WIM" IF "%WIM_TARGET%"=="SELECT" SET "ERROR=1"&&ECHO.&&ECHO.                          %XLR4%Target %TARGET_TYPE% not set.%#$%
IF "%TARGET_TYPE%"=="VHDX" IF "%VHDX_TARGET%"=="SELECT" SET "ERROR=1"&&ECHO.&&ECHO.                          %XLR4%Target %TARGET_TYPE% not set.%#$%
IF "%TARGET_TYPE%"=="WIM" IF NOT DEFINED ERROR IF EXIST "%IMAGE_FOLDER%\%WIM_TARGET%" SET "ERROR=1"&&ECHO.&&ECHO. %XLR4%Target %WIM_TARGET% exists. Try another name or delete the existing file.%#$%
IF "%TARGET_TYPE%"=="VHDX" IF NOT DEFINED ERROR IF EXIST "%IMAGE_FOLDER%\%VHDX_TARGET%" ECHO.&&ECHO.                    File %#@%%VHDX_TARGET%%#$% already exists.&&ECHO.  %XLR2%Note:%#$% Updating may cause errors. Try a new vhdx if having issues.&&ECHO.&&ECHO.                        Press (%##%X%#$%) to overwrite.&&ECHO.&&CALL:PAD_PREV&&CALL SET "PROMPT_SET=CONFIRM"&&CALL:PROMPT_SET
IF "%TARGET_TYPE%"=="VHDX" IF NOT DEFINED ERROR IF EXIST "%IMAGE_FOLDER%\%VHDX_TARGET%" IF NOT "%CONFIRM%"=="X" SET "ERROR=1"&&ECHO.&&ECHO. %##%Abort.%#$%
IF DEFINED ERROR GOTO:IMAGEPROC_CLEANUP
IF NOT DEFINED WIM_INDEX SET "WIM_INDEX=1"
IF NOT DEFINED WIM_DESC SET "WIM_DESC=DESC"
IF "%SOURCE_TYPE%"=="WIM" IF "%TARGET_TYPE%"=="VHDX" CALL:WIM2VHDX
IF "%SOURCE_TYPE%"=="VHDX" IF "%TARGET_TYPE%"=="WIM" CALL:VHDX2WIM
:IMAGEPROC_CLEANUP
ECHO.&&ECHO.          %#@%IMAGE PROCESSING END:%#$%  %DATE%  %TIME%&&CALL:BOXB2&&CALL:PAUSED
EXIT /B
:BOOT_IMPORT
IF EXIST "%BOOT_FOLDER%\boot.sav" CALL:PAD_LINE&&CALL:BOXT1&&ECHO.&&ECHO.         File boot.sav already exists. Press (%##%X%#$%) to overwrite.&&ECHO.&&CALL:BOXB1&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL SET "PROMPT_SET=CONFIRM"&&CALL:PROMPT_SET
IF EXIST "%BOOT_FOLDER%\boot.sav" IF NOT "%CONFIRM%"=="X" EXIT /B
IF EXIST "%SOURCE_LOCATION%\boot.wim" ECHO.Importing %#@%boot.wim%#$% to boot.sav...&&COPY /Y "%SOURCE_LOCATION%\boot.wim" "%BOOT_FOLDER%\boot.sav"
EXIT /B
:SOURCE_IMPORT
SET "WIM_EXT="&&FOR %%G in (wim esd) DO (IF EXIST "%SOURCE_LOCATION%\install.%%G" SET "WIM_EXT=%%G")
IF EXIST "%SOURCE_LOCATION%\install.%WIM_EXT%" ECHO.&&CALL:PAD_LINE&&CALL:BOXT1&&ECHO.&&ECHO.                         Enter name of new .WIM&&ECHO.&&CALL:BOXB1&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "PROMPT_SET=NEW_NAME"&&SET "PROMPT_ANY=1"&&CALL:PROMPT_SET
IF NOT DEFINED NEW_NAME EXIT /B
IF EXIST "%IMAGE_FOLDER%\%NEW_NAME%.wim" CALL:PAD_LINE&&CALL:BOXT1&&ECHO.&&ECHO.         File %NEW_NAME%.wim already exists. Press (%##%X%#$%) to overwrite.&&ECHO.&&CALL:BOXB1&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL SET "PROMPT_SET=CONFIRM"&&CALL:PROMPT_SET
IF EXIST "%IMAGE_FOLDER%\%NEW_NAME%.wim" IF NOT "%CONFIRM%"=="X" EXIT /B
IF DEFINED NEW_NAME ECHO.Copying install.%WIM_EXT% to %#@%%NEW_NAME%.wim%#$%...&&COPY /Y "%SOURCE_LOCATION%\install.%WIM_EXT%" "%IMAGE_FOLDER%\%NEW_NAME%.wim"&&SET "NEW_NAME="
EXIT /B
:WIM2VHDX
ECHO.&&IF EXIST "%IMAGE_FOLDER%\%VHDX_TARGET%" SET "VDISK=%IMAGE_FOLDER%\%VHDX_TARGET%"&&SET "VDISK_LTR=ANY"&&CALL:VDISK_ATTACH
IF NOT EXIST "%IMAGE_FOLDER%\%VHDX_TARGET%" SET "VDISK=%IMAGE_FOLDER%\%VHDX_TARGET%"&&SET "VDISK_LTR=ANY"&&CALL:VDISK_CREATE
IF NOT EXIST "%VDISK_LTR%:\" ECHO.&&ECHO.          %XLR4%Vdisk Error. If VHDX refuses mounting, try another.%#$%&&ECHO.&&CALL:VDISK_DETACH&EXIT /B
SET "IMAGE_SRC=%IMAGE_FOLDER%\%WIM_SOURCE%"&&SET "APPLYDIR_MASTER=%VDISK_LTR%:"
DISM /ENGLISH /APPLY-IMAGE /IMAGEFILE:"%IMAGE_SRC%" /INDEX:%WIM_INDEX% /APPLYDIR:"%APPLYDIR_MASTER%"
ECHO.&&CALL:VDISK_DETACH
EXIT /B
:VHDX2WIM
ECHO.&&SET "VDISK=%IMAGE_FOLDER%\%VHDX_SOURCE%"&&SET "VDISK_LTR=ANY"&&CALL:VDISK_ATTACH
IF NOT EXIST "%VDISK_LTR%:\" ECHO.&&ECHO.          %XLR4%Vdisk Error. If VHDX refuses mounting, try another.%#$%&&ECHO.&&CALL:VDISK_DETACH&EXIT /B
SET "IMAGE_TGT=%IMAGE_FOLDER%\%WIM_TARGET%"&&SET "CAPTUREDIR_MASTER=%VDISK_LTR%:"
DISM /ENGLISH /CAPTURE-IMAGE /CAPTUREDIR:"%CAPTUREDIR_MASTER%" /IMAGEFILE:"%IMAGE_TGT%" /COMPRESS:%WIM_XLVL% /NAME:%WIM_DESC%
ECHO.&&CALL:VDISK_DETACH
EXIT /B
:IMAGEPROC_XLVL
IF "%WIM_XLVL%"=="FAST" SET "WIM_XLVL=MAX"&&EXIT /B
IF "%WIM_XLVL%"=="MAX" SET "WIM_XLVL=NONE"&&EXIT /B
IF "%WIM_XLVL%"=="NONE" SET "WIM_XLVL=FAST"&&EXIT /B
EXIT /B
:IMAGEPROC_VSIZE
CALL:PAD_LINE&&CALL:BOXT1&&ECHO.&&ECHO.                       Enter new VHDX size in MB&&ECHO.                Note: 25000 or greater is recommended&&ECHO.&&CALL:BOXB1&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "PROMPT_SET=VHDX_SIZE"&&CALL:PROMPT_SET
SET "CHECK=NUM"&&SET "CHECK_VAR=%VHDX_SIZE%"&&CALL:CHECK
IF DEFINED ERROR SET "VHDX_SIZE=25600"
EXIT /B
:IMAGEPROC_TARGET
CALL:PAD_LINE&&CALL:BOXT1&&ECHO.&&ECHO.                        Enter name of new .%TARGET_TYPE%&&ECHO.&&CALL:BOXB1&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "PROMPT_SET=SELECTX"&&SET "PROMPT_ANY=1"&&CALL:PROMPT_SET
IF NOT DEFINED SELECTX SET "%TARGET_TYPE%_TARGET="
IF "%TARGET_TYPE%"=="WIM" IF DEFINED SELECTX SET "WIM_TARGET=%SELECTX%.wim"
IF "%TARGET_TYPE%"=="VHDX" IF DEFINED SELECTX SET "VHDX_TARGET=%SELECTX%.vhdx"
EXIT /B
:IMAGEPROC_SOURCE
SET "MENUT0=                           Image Processing"&&SET "MENUT1= "&&SET "MENUT2=  %#@%AVAILABLE %SOURCE_TYPE%s:%#$%"&&SET "MENUT3= "&&SET "MENUT4= ( %##%.%#$% ) File Operation"&&SET "MENUB0= "&&SET "PICK=%SOURCE_TYPE%"&&CALL:FILE_PICK
IF "%SELECT%"=="." SET "FILE_TYPE=%SOURCE_TYPE%"&&CALL:BASIC_FILE&EXIT /B
CALL SET "%SOURCE_TYPE%_SOURCE=%$TRUMP%"
EXIT /B
:BASIC_FILE
IF DEFINED FILE_OPER GOTO:BASIC_FILETYPE
CLS&&CALL:PAD_LINE&&CALL:BOXT1&&ECHO.                            File Operation&&ECHO.&&ECHO. (%##%1%#$%) Rename&&ECHO. (%##%2%#$%) Delete&&ECHO. (%##%3%#$%) Copy
ECHO.&&CALL:BOXB1&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "PROMPT_SET=FILE_PROMPT"&&CALL:PROMPT_SET
IF "%FILE_PROMPT%"=="1" SET "FILE_OPER=Rename"
IF "%FILE_PROMPT%"=="2" SET "FILE_OPER=Delete"
IF "%FILE_PROMPT%"=="3" SET "FILE_OPER=Copy"
IF NOT DEFINED FILE_OPER GOTO:BASIC_ERROR
:BASIC_FILETYPE
IF DEFINED FILE_SKIP GOTO:BASIC_FILEOPER
:BASIC_FILEPICK
FOR %%X in (WIM VHDX ISO LIST BASE CAB MSU PKX APPX APPXBUNDLE MSIXBUNDLE) DO (IF "%%X"=="%FILE_TYPE%" SET "MENUT0=                              File %FILE_OPER%"&&SET "MENUT1= "&&SET "MENUT2=  %#@%AVAILABLE %%Xs:%#$%"&&SET "MENUT3= "&&SET "MENUB0= "&&SET "PICK=%%X"&&CALL:FILE_PICK)
IF "%FILE_TYPE%"=="WALL" SET "MENUT0=                              File %FILE_OPER%"&&SET "MENUT1= "&&SET "MENUT2=  %#@%AVAILABLE JPGs/PNGs:%#$%"&&SET "MENUT3= "&&SET "MENUB0= "&&SET "PICK=CUST"&&SET "$FOLD0=%CACHE_FOLDER%"&&SET "$FILT0=*.JPG *.PNG"&&CALL:FILE_PICK
IF "%FILE_TYPE%"=="MAIN" SET "MENUT0=                              File %FILE_OPER%"&&SET "MENUT1= "&&SET "MENUT2=  %#@%MAIN FOLDER VHDXs:%#$%"&&SET "MENUT3= "&&SET "MENUB0= "&&SET "PICK=CUST"&&SET "$FOLD0=%PROG_SOURCE%"&&SET "$FILT0=*.VHDX"&&CALL:FILE_PICK
IF "%FILE_TYPE%"=="IMAGE" SET "MENUT0=                              File %FILE_OPER%"&&SET "MENUT1= "&&SET "MENUT2=  %#@%AVAILABLE WIMs/VHDXs:%#$%"&&SET "MENUT3= "&&SET "MENUB0= "&&SET "PICK=CUST"&&SET "$FOLD0=%IMAGE_FOLDER%"&&SET "$FILT0=*.WIM *.VHDX"&&CALL:FILE_PICK
IF "%FILE_TYPE%"=="LISTS" SET "MENUT0=                              File %FILE_OPER%"&&SET "MENUT1= "&&SET "MENUT2=  %#@%AVAILABLE LISTs/BASEs:%#$%"&&SET "MENUT3= "&&SET "MENUB0= "&&SET "PICK=CUST"&&SET "$FOLD0=%LIST_FOLDER%"&&SET "$FILT0=*.LIST *.BASE"&&CALL:FILE_PICK
IF "%FILE_TYPE%"=="PACK" SET "MENUT0=                              File %FILE_OPER%"&&SET "MENUT1= "&&SET "MENUT2=  %#@%AVAILABLE PACKAGEs:%#$%"&&SET "MENUT3= "&&SET "MENUB0= "&&SET "PICK=CUST"&&SET "$FOLD0=%PACK_FOLDER%"&&SET "$FILT0=*.PKX *.CAB *.MSU *.APPX *.APPXBUNDLE *.MSIXBUNDLE"&&CALL:FILE_PICK
IF "%FILE_TYPE%"=="PKXLIST" SET "MENUT0=                              File %FILE_OPER%"&&SET "MENUT1= "&&SET "MENUT2=  %#@%AVAILABLE PKXs/LISTs:%#$%"&&SET "MENUT3= "&&SET "MENUB0= "&&SET "PICK=CUST"&&SET "$FOLD0=%PACK_FOLDER%"&&SET "$FILT0=*.PKX"&&SET "$FOLD1=%LIST_FOLDER%"&&SET "$FILT1=*.LIST"&&CALL:FILE_PICK&SET "ERROR="
IF "%FILE_TYPE%"=="PKXLIST" SET "$PICK_EXT="&&IF DEFINED $TRUMP FOR %%G in ("%$TRUMP%") DO (SET "CAPS_SET=$PICK_EXT"&&SET "CAPS_VAR=%%~xG"&&CALL:CAPS_SET)
IF "%FILE_TYPE%"=="PKXLIST" IF "%$PICK_EXT%"==".PKX" SET "$PICK=%PACK_FOLDER%\%$TRUMP%"&&SET "$PICK_PATH=%PACK_FOLDER%\"
IF "%FILE_TYPE%"=="PKXLIST" IF "%$PICK_EXT%"==".LIST" SET "$PICK=%LIST_FOLDER%\%$TRUMP%"&&SET "$PICK_PATH=%LIST_FOLDER%\"
IF NOT DEFINED $PICK GOTO:BASIC_ERROR
:BASIC_FILEOPER
IF "%FILE_OPER%"=="Delete" CALL:CONFIRM
IF "%FILE_OPER%"=="Delete" IF "%CONFIRM%"=="X" DEL /Q /F "%$PICK%">NUL
IF "%FILE_OPER%"=="Delete" GOTO:BASIC_ERROR
CALL:PAD_LINE&&CALL:BOXT1&&ECHO.&&ECHO.                        Enter new name of %$PICK_EXT%&&ECHO.&&CALL:BOXB1&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "PROMPT_SET=FILE_PROMPT"&&SET "PROMPT_ANY=1"&&CALL:PROMPT_SET
IF NOT DEFINED FILE_PROMPT GOTO:BASIC_ERROR
IF EXIST "%$PICK_PATH%\%FILE_PROMPT%%$PICK_EXT%" GOTO:BASIC_ERROR
SET "CASE=LOWER"&&SET "CAPS_SET=$PICK_EXT"&&SET "CAPS_VAR=%$PICK_EXT%"&&CALL:CAPS_SET
IF "%FILE_OPER%"=="Rename" REN "%$PICK%" "%FILE_PROMPT%%$PICK_EXT%">NUL 2>&1
IF "%FILE_OPER%"=="Copy" ECHO.Copying %FILE_PROMPT%%$PICK_EXT%...&&COPY /Y "%$PICK%" "%$PICK_PATH%%FILE_PROMPT%%$PICK_EXT%">NUL 2>&1
:BASIC_ERROR
SET "FILE_OPER="&&SET "FILE_TYPE="&&SET "FILE_NAME="&&SET "FILE_SKIP="&&SET "$PICK="
EXIT /B
:WIM_INDEX_MENU
CLS&&CALL:PAD_LINE&&CALL:BOXT1&&ECHO.                           Image Processing&&ECHO.&&ECHO.  %#@%AVAILABLE INDEXs:%#$%&&ECHO.&&SET "INDEX_TMP="&&SET "NAME_TMP="&&FOR /F "TOKENS=1-9 DELIMS=: " %%a in ('DISM /ENGLISH /Get-ImageInfo /ImageFile:"%IMAGE_FOLDER%\%WIM_SOURCE%"') DO (
IF "%%a"=="Index" CALL SET "INDEX_TMP=%%b"
IF "%%a"=="Name" CALL SET "NAME_TMP=%%b %%c %%d %%e %%f %%g %%h %%i"&&CALL:WIM_INDEX_LIST)
IF NOT DEFINED INDEX_TMP ECHO.%XLR2%ERROR%#$%&&SET "ERROR=1"&&EXIT /B
SET "INDEX_TMP="&&SET "NAME_TMP="&&ECHO.&&CALL:BOXB1&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED SELECT SET "ERROR=1"&&EXIT /B
SET "WIM_INDEX=%SELECT%"&&CALL:WIM_INDEX_QUERY
IF "%WIM_DESC%"=="NULL" ECHO.&&ECHO. %XLR2%ERROR%#$%&&SET "ERROR=1"
EXIT /B
:WIM_INDEX_LIST
ECHO. ( %##%%INDEX_TMP%%#$% ) %NAME_TMP%
EXIT /B
:WIM_INDEX_QUERY
SET "WIM_DESC="&&FOR /F "TOKENS=1-5 DELIMS=<> " %%a in ('DISM /ENGLISH /Get-ImageInfo /ImageFile:"%IMAGE_FOLDER%\%WIM_SOURCE%" /Index:%WIM_INDEX% 2^>NUL') DO (IF "%%a"=="Edition" SET "WIM_DESC=%%c")
IF NOT DEFINED WIM_DESC SET "WIM_INDEX=1"&&SET "WIM_DESC=NULL"
EXIT /B
:BCD_MENU
CLS&&CALL:SETS_HANDLER&&CALL:CLEAN&&CALL:PAD_LINE&&CALL:BOXT1&&IF NOT DEFINED BOOT_TIMEOUT SET "BOOT_TIMEOUT=5"
ECHO.                           Boot Menu Editor&&ECHO.&&ECHO. Time (%##%T%#$%^) %#@%%BOOT_TIMEOUT%%#$% seconds
FOR %%G in (0 1 2 3 4 5 6 7 8 9) DO (CALL ECHO. Slot ^(%##%%%G%#$%^) %#@%%%VHDX_SLOT%%G%%%#$%)
ECHO.&&ECHO.                Press (%##%X%#$%) to apply boot menu settings&&CALL:BOXB1&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED SELECT EXIT /B
IF "%SELECT%"=="T" CALL:BOOT_TIMEOUT&SET "SELECT="
IF "%SELECT%"=="X" IF "%PROG_MODE%"=="RAMDISK" CALL:BCD_REBUILD&SET "SELECT="
FOR %%G in (0 1 2 3 4 5 6 7 8 9) DO (IF "%SELECT%"=="%%G" SET "$VHDX=%%G"&&CALL:VHDX_CHECK&SET "SELECT=")
GOTO:BCD_MENU
:BOOT_TIMEOUT
CALL:PAD_LINE&&CALL:BOXT1&&ECHO.&&ECHO.                  Enter boot menu timeout in seconds&&ECHO.&&CALL:BOXB1&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
SET "CHECK=NUM"&&SET "CHECK_VAR=%SELECT%"&&CALL:CHECK
IF NOT DEFINED ERROR SET "BOOT_TIMEOUT=%SELECT%"
IF DEFINED ERROR SET "BOOT_TIMEOUT="
EXIT /B
:MENU_SELECT
SET "$TRUMP="&&SET "SELECT="&&SET /P "SELECT=$>>"
IF NOT DEFINED SELECT EXIT /B
SET "SELECT=%SELECT:"=%"
SET "SELECT=%SELECT:&=%"
SET "SELECT=%SELECT:>=%"
SET "SELECT=%SELECT:<=%"
SET "SELECT=%SELECT:|=%"
SET "SELECT=%SELECT:!=%"
FOR /F "TOKENS=1-2 DELIMS=<>&|!" %%a in ("%SELECT%") DO (SET "CAPS_SET=SELECT"&&SET "CAPS_VAR=%%a"&&CALL:CAPS_SET)
IF "%SELECT%"=="=" SET "SELECT="
CALL SET "$TRUMP=%%$ITEM%SELECT%%%"
EXIT /B
:PROMPT_SET
IF NOT DEFINED PROMPT_SET SET "PROMPT_SET=SELECT"
SET "%PROMPT_SET%="&&SET "PROMPT_VAR="&&SET /P "PROMPT_VAR=$>>"
IF NOT DEFINED PROMPT_VAR GOTO:PROMPT_SET_END
IF DEFINED NO_FILT GOTO:NO_FILT
IF NOT DEFINED NO_QUOTES SET "PROMPT_VAR=%PROMPT_VAR:"=%"
SET "PROMPT_VAR=%PROMPT_VAR:&=%"
SET "PROMPT_VAR=%PROMPT_VAR:>=%"
SET "PROMPT_VAR=%PROMPT_VAR:<=%"
SET "PROMPT_VAR=%PROMPT_VAR:|=%"
SET "PROMPT_VAR=%PROMPT_VAR:!=%"
FOR /F "TOKENS=1-2 DELIMS=<>&|!" %%a in ("%PROMPT_VAR%") DO (SET "PROMPT_VAR=%%a")
IF "%PROMPT_VAR%"=="=" SET "%PROMPT_SET%="&&GOTO:PROMPT_SET_END
:NO_FILT
SET "CAPS_SET=%PROMPT_SET%"&&SET "CAPS_VAR=%PROMPT_VAR%"
IF DEFINED PROMPT_ANY CALL SET "%CAPS_SET%=%CAPS_VAR%"
IF NOT DEFINED PROMPT_ANY CALL:CAPS_SET
:PROMPT_SET_END
SET "PROMPT_ANY="&&SET "PROMPT_SET="&&SET "PROMPT_VAR="&&SET "NO_FILT="&&SET "NO_QUOTES="
EXIT /B
:CAPS_SET
IF NOT DEFINED CASE SET "CASE=UPPER"
IF "%CASE%"=="LOWER" FOR %%G in (a b c d e f g h i j k l m n o p q r s t u v w x y z) DO (CALL SET "CAPS_VAR=%%CAPS_VAR:%%G=%%G%%")
IF "%CASE%"=="UPPER" FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (CALL SET "CAPS_VAR=%%CAPS_VAR:%%G=%%G%%")
IF "%CAPS_VAR%"=="a=a" SET "CAPS_VAR="
IF "%CAPS_VAR%"=="A=A" SET "CAPS_VAR="
CALL SET "%CAPS_SET%=%CAPS_VAR%"&&SET "CAPS_SET="&&SET "CAPS_VAR="&&SET "CASE="
EXIT /B
:CHAR_CHK
FOR %%a in (CHAR_STR CHAR_CHK) DO (IF NOT DEFINED %%a EXIT /B)
SET "CHAR_FLG="&&FOR /F "DELIMS=" %%$ in ('CMD.EXE /D /U /C ECHO.%CHAR_STR%^| FIND /V ""') do (IF "%%$"=="%CHAR_CHK%" SET "ERROR=1"&&SET "CHAR_FLG=1")
EXIT /B
:PAD_PREV
ECHO.               Press (%##%Enter%#$%) to return to previous menu
EXIT /B
:PAUSED
SET /P "PAUSED=.                      Press (%##%Enter%#$%) to continue..."
EXIT /B
:CLEAN
IF NOT EXIST "$DSK" EXIT /B
IF EXIST "$DSK" DEL /Q /F "$DSK">NUL
EXIT /B
:CHECK
SET "ERROR="&&IF NOT DEFINED CHECK_VAR SET "ERROR=1"
IF NOT DEFINED ERROR IF "%CHECK%"=="NUM" FOR /F "DELIMS=" %%$ in ('CMD.EXE /D /U /C ECHO.%CHECK_VAR%^| FIND /V ""') do (
SET "PASS="&&FOR %%a in (0 1 2 3 4 5 6 7 8 9) DO (IF "%%a"=="%%$" SET "PASS=1")
IF NOT DEFINED PASS SET "ERROR=1"
IF "%%$"==" " SET "ERROR=1")
IF NOT DEFINED ERROR IF "%CHECK%"=="LTR" SET "CAPS_SET=CHECK_VAR"&&SET "CAPS_VAR=%CHECK_VAR%"&&CALL:CAPS_SET
IF NOT DEFINED ERROR IF "%CHECK%"=="LTR" FOR /F "DELIMS=" %%$ in ('CMD.EXE /D /U /C ECHO.%CHECK_VAR%^| FIND /V ""') do (
SET "PASS="&&FOR %%a in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (IF "%%a"=="%%$" SET "PASS=1")
IF NOT DEFINED PASS SET "ERROR=1"
IF "%%$"==" " SET "ERROR=1")
IF DEFINED ERROR ECHO. %XLR4%ERROR:%#$% input [ %XLR4%%CHECK_VAR%%#$% ] is invalid
SET "CHECK="&&SET "CHECK_VAR="
EXIT /B
:FREE_CALC
SET "FREE="&&FOR /F "TOKENS=1-5 DELIMS= " %%a IN ('DIR "%PROG_SOURCE%\*."') DO (IF "%%d %%e"=="bytes free" SET "FREE_Z=%%c")
IF NOT DEFINED FREE_Z SET "FREE=ERROR"&&EXIT /B
SET "FREE_Z=%FREE_Z:,=%"
FOR /F "DELIMS=" %%G in ('CMD.EXE /D /U /C ECHO.%FREE_Z%^| FIND /V ""') do (SET "FREE_X=%%G"&&SET /A "FREE_XNT+=1"&&CALL:FREE_XNT)
IF %FREE_XNT% LSS 10 SET "FREE=0"
IF "%FREE_XNT%"=="10" SET "FREE=%FREE1%"
IF "%FREE_XNT%"=="11" SET "FREE=%FREE1%%FREE2%"
IF "%FREE_XNT%"=="12" SET "FREE=%FREE1%%FREE2%%FREE3%"
IF "%FREE_XNT%"=="13" SET "FREE=%FREE1%%FREE2%%FREE3%%FREE4%"
IF "%FREE_XNT%"=="14" SET "FREE=%FREE1%%FREE2%%FREE3%%FREE4%%FREE5%"
FOR %%a in (0 1 2 3 4 5 _XNT _X _Z) DO (SET "FREE%%a=")
EXIT /B
:FREE_XNT
IF %FREE_XNT% GTR 5 EXIT /B
SET "FREE%FREE_XNT%=%FREE_X%"
EXIT /B
:SETS_LIST
SET SETS_LIST=PAD_BOX PAD_TYPE PAD_SIZE PAD_SEQ TXT_COLOR ACC_COLOR BTN_COLOR WIM_XLVL BOOT_TIMEOUT VHDX_SLOT0 VHDX_SLOT1 VHDX_SLOT2 VHDX_SLOT3 VHDX_SLOT4 VHDX_SLOT5 VHDX_SLOT6 VHDX_SLOT7 VHDX_SLOT8 VHDX_SLOT9
EXIT /B
:SETS_LOAD
IF EXIST "settings.ini" FOR /F "eol=- TOKENS=1-2 DELIMS==" %%a in (settings.ini) DO (IF NOT "%%a"=="   " SET "%%a=%%b")
EXIT /B
:SETS_CLEAR
CALL:SETS_LIST
FOR %%a in (%SETS_LIST%) DO (SET %%a=)
SET "SETS_LIST="&&EXIT /B
:SETS_HANDLER
IF NOT EXIST "%PROG_SOURCE%" SET "PROG_SOURCE=%PROG_FOLDER%"
CD /D "%PROG_FOLDER%"&&IF EXIST "settings.ini" IF NOT DEFINED $ETS SET "$ETS=1"&&CALL:SETS_LOAD
CALL:SETS_LIST&&ECHO.deploy Settings>"settings.ini"
FOR %%a in (%SETS_LIST%) DO (CALL ECHO.%%a=%%%%a%%>>"settings.ini")
SET "SETS_LIST="&&IF "%PROG_MODE%"=="RAMDISK" IF "%PROG_SOURCE%"=="X:\$" SET "HOST_GET=1"
IF "%PROG_MODE%"=="RAMDISK" IF NOT "%DISK_TARGET%"=="%HOST_TARGET%" SET "HOST_GET=1"
IF DEFINED HOST_GET SET "HOST_GET="&&CALL:HOST_AUTO
IF "%PROG_MODE%"=="RAMDISK" IF EXIST "Z:\$" COPY /Y "settings.ini" "Z:\$">NUL
:SETS_MAIN
IF NOT DEFINED WIM_XLVL SET "WIM_XLVL=FAST"
IF NOT DEFINED PAD_BOX SET "PAD_BOX=ENABLED"
IF NOT DEFINED PAD_SEQ SET "PAD_SEQ=6666600000"
FOR %%a in (CACHE IMAGE PACK LIST BOOT) DO (SET "%%a_FOLDER=%PROG_SOURCE%")
IF NOT DEFINED XLR0 SET "XLR0=[97m"&&SET "XLR1=[31m"&&SET "XLR2=[91m"&&SET "XLR3=[33m"&&SET "XLR4=[93m"&&SET "XLR5=[92m"&&SET "XLR6=[96m"&&SET "XLR7=[94m"&&SET "XLR8=[34m"&&SET "XLR9=[95m"&&CALL:PAD_LINE>NUL 2>&1
FOR %%a in (VHDX_SLOTX SELECTX SELECTY SELECTZ APPLYDIR CAPTUREDIR IMAGEINDEX $VHDX ERROR LIVE_APPLY $HALT $HALTX VDISK VDISK_LTR) DO (SET "%%a=")
IF "%PROG_MODE%"=="RAMDISK" FOR %%a in (VHDX_SLOT0 VHDX_SLOT1 VHDX_SLOT2 VHDX_SLOT3 VHDX_SLOT4 VHDX_SLOT5 VHDX_SLOT6 VHDX_SLOT7 VHDX_SLOT8 VHDX_SLOT9) DO (SET "OBJ_FLD=%PROG_SOURCE%"&&CALL SET "OBJ_CHK=%%a"&&CALL:OBJ_CLEAR)
FOR %%a in (VHDX_SLOT0 VHDX_SLOT1 VHDX_SLOT2 VHDX_SLOT3 VHDX_SLOT4 VHDX_SLOT5 VHDX_SLOT6 VHDX_SLOT7 VHDX_SLOT8 VHDX_SLOT9) DO (IF NOT DEFINED %%a SET "%%a=SELECT")
SET "OBJ_FLD="&&SET "OBJ_CHK="&&SET "OBJ_CHKX="&&IF "%WIM_SOURCE%"=="SELECT" SET "WIM_INDEX=1"
EXIT /B
:OBJ_CLEAR
CALL SET "OBJ_CHKX=%%%OBJ_CHK%%%"
IF NOT EXIST "%OBJ_FLD%\%OBJ_CHKX%" CALL SET "%OBJ_CHK%=SELECT"
EXIT /B
:FILE_PICK
IF NOT DEFINED PICK GOTO:PICK_ERROR
IF NOT DEFINED NOCLS CLS
IF NOT DEFINED NOPAD CALL:PAD_LINE
CALL:BOXT1&&SET "NLIST=%PICK%"&&CALL:FILE_LIST&&CALL:BOXB1&&IF NOT DEFINED NOPAD CALL:PAD_LINE
FOR %%a in (ERROR SELECT $LIST_NAME $MAKE $PICK $TRUMP $HEAD $PICK_PATH $PICK_BODY $PICK_EXT FILE_NAME NOCLS NOPAD) DO (SET "%%a=")
CALL:PAD_PREV&&CALL:MENU_SELECT
IF "%SELECT%"=="." GOTO:PICK_ERROR
IF "%SELECT%" GTR "9999999" SET "ERROR=1"
IF "%SELECT%" LSS "1" SET "ERROR=1"
IF NOT DEFINED $TRUMP SET "ERROR=1"
IF NOT DEFINED $FOLD_X SET "ERROR=1"
IF DEFINED ERROR GOTO:PICK_ERROR
IF EXIST "%$FOLD_X%\%$TRUMP%" SET "$PICK=%$FOLD_X%\%$TRUMP%"
:PICK_ERROR
IF NOT DEFINED ERROR FOR %%G in ("%$PICK%") DO (SET "$PICK_PATH=%%~dG%%~pG"&&SET "$PICK_BODY=%%~nG"&&SET "$PICK_EXT=%%~xG")
IF NOT DEFINED ERROR FOR %%G in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (CALL SET "$PICK_PATH=%%$PICK_PATH:%%G=%%G%%"&&CALL SET "$PICK_BODY=%%$PICK_BODY:%%G=%%G%%"&&CALL SET "$PICK_EXT=%%$PICK_EXT:%%G=%%G%%")
SET "PICK="&&IF DEFINED ERROR SET "$PICK="
EXIT /B
:FILE_LIST
SET "EMPTY_X=1"&&SET "$FOLD_X="&&SET "$FILT_X="&&SET "$XNT="&&FOR %%a in (1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30) DO (IF DEFINED $ITEM%%a SET "$ITEM%%a=")
IF NOT DEFINED BLIST IF NOT DEFINED NLIST GOTO:FILE_ERROR
FOR %%a in (BLIST NLIST) DO (IF DEFINED %%a CALL SET "EXT=%%%%a%%")
FOR %%a in (0 1 2 3 4 5 6 7 8 9) DO (IF DEFINED MENUT%%a CALL ECHO.%%MENUT%%a%%&&SET "MENUT%%a=")
FOR %%a in (ISO VHDX WIM) DO (IF "%EXT%"=="%%a" SET "$FOLD_X=%IMAGE_FOLDER%"&&SET "$FILT_X=*.%EXT%"&&CALL:FILE_LIST_FOLD)
IF "%EXT%"=="CUST" FOR %%X in (0 1 2 3 4 5 6 7 8 9) DO (IF DEFINED $FOLD%%X IF DEFINED $FILT%%X CALL SET "$FOLD_X=%%$FOLD%%X%%"&&CALL SET "$FILT_X=%%$FILT%%X%%"&&SET "$FOLD%%X="&&SET "$FILT%%X="&&CALL:FILE_LIST_FOLD)
IF DEFINED EMPTY_X ECHO.  EMPTY..
FOR %%a in (0 1 2 3 4 5 6 7 8 9) DO (IF DEFINED MENUB%%a CALL ECHO.%%MENUB%%a%%&&SET "MENUB%%a=")
:FILE_ERROR
FOR %%a in ($FILT_X EMPTY_X EXT BLIST NLIST $XNT) DO (SET "%%a=")
EXIT /B
:FILE_LIST_FOLD
FOR /F "TOKENS=1-9 DELIMS= " %%a in ("%$FILT_X%") DO (IF NOT "%%a"=="" SET "$FILT_X=%%a"&&CALL:FILE_LIST_FILT&&IF NOT "%%b"=="" SET "$FILT_X=%%b"&&CALL:FILE_LIST_FILT&&IF NOT "%%c"=="" SET "$FILT_X=%%c"&&CALL:FILE_LIST_FILT&&IF NOT "%%d"=="" SET "$FILT_X=%%d"&&CALL:FILE_LIST_FILT&&IF NOT "%%e"=="" SET "$FILT_X=%%e"&&CALL:FILE_LIST_FILT&&IF NOT "%%f"=="" SET "$FILT_X=%%f"&&CALL:FILE_LIST_FILT&&IF NOT "%%g"=="" SET "$FILT_X=%%g"&&CALL:FILE_LIST_FILT&&IF NOT "%%h"=="" SET "$FILT_X=%%h"&&CALL:FILE_LIST_FILT)
EXIT /B
:FILE_LIST_FILT
IF EXIST "%$FOLD_X%\%$FILT_X%" SET "EMPTY_X="&&FOR /F "TOKENS=*" %%a in ('DIR /A: /B /O:GN "%$FOLD_X%\%$FILT_X%"') DO (CALL SET /A "$XNT+=1"&&CALL SET "$CLM$=%%a"&&CALL:FILE_LISTX)
EXIT /B
:FILE_LISTX
CALL SET "$ITEM%$XNT%=%$CLM$%"
IF EXIST "%$FOLD_X%\%$CLM$%\*" (SET "LIST_CLR1=%#@%"&&SET "LIST_CLR2=%#$%") ELSE (SET "LIST_CLR1="&&SET "LIST_CLR2=")
IF DEFINED NLIST ECHO. ( %##%%$XNT%%#$% ) %LIST_CLR1%%$CLM$%%LIST_CLR2%
IF DEFINED BLIST ECHO.   %LIST_CLR1%%$CLM$%%LIST_CLR2%
EXIT /B
:SETTINGS_MENU
CLS&&CALL:SETS_HANDLER&&CALL:PAD_LINE&&CALL:BOXT1&&ECHO.                        Settings Configuration&&ECHO.
ECHO. (%##%-%#$%) Color Shift (%##%+%#$%)&&ECHO. (%##%1%#$%) Pad Type          %#@%PAD %PAD_TYPE%%#$%&&ECHO. (%##%2%#$%) Pad Size          %#@%%PAD_SIZE%%#$%&&ECHO. (%##%3%#$%) Pad Sequence      %#@%%PAD_SEQ%%#$%&&CALL ECHO. (%##%4%#$%) Text Color        %#@%COLOR %%XLR%TXT_COLOR%%%%TXT_COLOR%%#$%&&CALL ECHO. (%##%5%#$%) Accent Color      %#@%COLOR %%XLR%ACC_COLOR%%%%ACC_COLOR%%#$%&&CALL ECHO. (%##%6%#$%) Button Color      %#@%COLOR %%XLR%BTN_COLOR%%%%BTN_COLOR%%#$%&&CALL ECHO. (%##%7%#$%) Pad Box           %#@%%PAD_BOX%%#$%&&CALL ECHO. (%##%8%#$%) Compression       %#@%%WIM_XLVL%%#$%&&ECHO. (%##%@%#$%) Clear Settings&&ECHO.&&CALL:BOXB1&&CALL:PAD_LINE
CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED SELECT IF "%PROG_MODE%"=="RAMDISK" GOTO:BASIC_MODE
IF NOT DEFINED SELECT IF "%PROG_MODE%"=="PORTABLE" GOTO:BASIC_CREATOR
IF "%SELECT%"=="@" CALL:SETS_CLEAR&SET "SELECT="
IF "%SELECT%"=="+" CALL:COLOR_SHIFT_TXT&SET "SELECT="
IF "%SELECT%"=="-" CALL:COLOR_SHIFT_PAD&SET "SELECT="
IF "%SELECT%"=="1" CALL:PAD_TYPE&SET "SELECT="
IF "%SELECT%"=="2" IF "%PAD_SIZE%"=="LARGE" SET "PAD_SIZE=SMALL"&SET "SELECT="
IF "%SELECT%"=="2" IF "%PAD_SIZE%"=="SMALL" SET "PAD_SIZE=LARGE"&SET "SELECT="
IF "%SELECT%"=="3" CALL:PAD_LINE&&CALL:BOXT1&&ECHO.&&ECHO.                  Enter 10 digit color sequence seed&&ECHO.&&ECHO.                   [ %XLR0%0%XLR1%1%XLR2%2%XLR3%3%XLR4%4%XLR5%5%XLR6%6%XLR7%7%XLR8%8%XLR9%9%#$% ]    [ %XLR1%11%XLR2%22%XLR3%33%XLR4%44%XLR5%55%#$% ]&&ECHO.&&CALL:BOXB1&&CALL:PAD_LINE&&SET "PROMPT_SET=COLOR_XXX"&&CALL:PROMPT_SET
IF "%SELECT%"=="3" IF "%COLOR_XXX%"=="-" SET "PAD_SEQ=6666600000"&SET "SELECT="
IF "%SELECT%"=="3" SET "XNTX="&&FOR /F "DELIMS=" %%G IN ('CMD.EXE /D /U /C ECHO.%COLOR_XXX%^| FIND /V ""') do (CALL SET /A XNTX+=1)
IF "%SELECT%"=="3" IF "%XNTX%"=="10" SET "PAD_SEQ=%COLOR_XXX%"&&SET "COLOR_XXX="&SET "SELECT="
IF "%SELECT%"=="4" SET "COLOR_TMP=TXT_COLOR"&&CALL:COLOR_CHOICE&SET "SELECT="
IF "%SELECT%"=="5" SET "COLOR_TMP=ACC_COLOR"&&CALL:COLOR_CHOICE&SET "SELECT="
IF "%SELECT%"=="6" SET "COLOR_TMP=BTN_COLOR"&&CALL:COLOR_CHOICE&SET "SELECT="
IF "%SELECT%"=="7" IF "%PAD_BOX%"=="DISABLED" SET "PAD_BOX=ENABLED"&SET "SELECT="
IF "%SELECT%"=="7" IF "%PAD_BOX%"=="ENABLED" SET "PAD_BOX=DISABLED"&SET "SELECT="
IF "%SELECT%"=="8" CALL:IMAGEPROC_XLVL&SET "SELECT="
GOTO:SETTINGS_MENU
:PAD_TYPE
IF NOT DEFINED CHCP_OLD FOR /F "TOKENS=2 DELIMS=:" %%a IN ('CHCP') DO SET "CHCP_OLD=%%a"
CHCP 65001 >NUL
CLS&&CALL:PAD_LINE&&CALL:BOXT1&&ECHO.&&ECHO.                           Choose a pad type&&ECHO.&&ECHO.   (%##%0%#$%)None (%##%1%#$%)◌ (%##%2%#$%)○ (%##%3%#$%)● (%##%4%#$%)□ (%##%5%#$%)■ (%##%6%#$%)░ (%##%7%#$%)▒ (%##%8%#$%)▓ (%##%9%#$%)~ (%##%10%#$%)= (%##%11%#$%)#&&CHCP %CHCP_OLD% >NUL
ECHO.&&CALL:BOXB1&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "PROMPT_SET=PAD_TYPE"&&CALL:PROMPT_SET
SET "PASS="&&FOR %%a in (0 1 2 3 4 5 6 7 8 9 10 11) DO (IF "%PAD_TYPE%"=="%%a" SET "PASS=1")
IF NOT "%PASS%"=="1" SET "PAD_TYPE=1"
EXIT /B
:COLOR_CHOICE
CALL:PAD_LINE&&CALL:BOXT1&&ECHO.&&ECHO.                            Choose a color&&ECHO.&&ECHO.                  [ %XLR0% 0 %XLR1% 1 %XLR2% 2 %XLR3% 3 %XLR4% 4 %XLR5% 5 %XLR6% 6 %XLR7% 7 %XLR8% 8 %XLR9% 9 %#$% ]&&ECHO.&&CALL:BOXB1&&CALL:PAD_LINE&&CALL:PAD_PREV&&SET "PROMPT_SET=COLOR_123"&&CALL:PROMPT_SET
SET "PASS="&&FOR %%a in (0 1 2 3 4 5 6 7 8 9) DO (IF "%COLOR_123%"=="%%a" SET "PASS=1")
IF "%PASS%"=="1" SET "%COLOR_TMP%=%COLOR_123%"
SET "COLOR_TMP="&&SET "COLOR_123="&&EXIT /B
:COLOR_SHIFT_PAD
FOR /F "DELIMS=" %%G in ('CMD.EXE /D /U /C ECHO.%PAD_SEQ%^| FIND /V ""') do (SET "XXX_XXX=%%G"&&SET /A "PAD_XNT+=1"&&CALL:PAD_XNT)
SET "PAD_SEQ=%PAD_SHIFT%"&&FOR %%a in (PAD_SHIFT PAD_XNT XXX_XXX) DO (SET "%%a=")
EXIT /B
:COLOR_SHIFT_TXT
FOR %%a in (TXT_COLOR ACC_COLOR BTN_COLOR) DO (SET /A "%%a+=1")
IF "%TXT_COLOR%"=="10" SET "TXT_COLOR=0"
IF "%ACC_COLOR%"=="10" SET "ACC_COLOR=0"
IF "%BTN_COLOR%"=="10" SET "BTN_COLOR=0"
EXIT /B
:PAD_XNT
IF %PAD_XNT% GTR 10 EXIT /B
SET /A "XXX_XXX+=1"&&IF "%XXX_XXX%"=="9" SET "XXX_XXX=0"
SET "PAD_SHIFT=%PAD_SHIFT%%XXX_XXX%"
EXIT /B
:DISK_UID
FOR %%a in (DISK_X UID_X) DO (IF NOT DEFINED %%a EXIT /B)
(ECHO.select disk %DISK_X%&&ECHO.uniqueid disk id=%UID_X%&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK"
SET "DISK_X="&&SET "UID_X="&&CALL:DEL_DSK&&EXIT /B
:PART_ASSIGN
FOR %%a in (DISK_X PART_X LETT_X) DO (IF NOT DEFINED %%a EXIT /B)
(ECHO.select disk %DISK_X%&&ECHO.select partition %PART_X%&&ECHO.assign letter=%LETT_X% noerr&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "DISK_X="&&SET "PART_X="&&SET "SIZE_X="&&CALL:DEL_DSK&&EXIT /B
:VOL_REMOVE
FOR %%a in (LETT_X) DO (IF NOT DEFINED %%a EXIT /B)
(ECHO.select VOLUME %LETT_X%&&ECHO.Remove letter=%LETT_X% noerr&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "DISK_X="&&SET "PART_X="&&SET "LETT_X="&&SET "SIZE_X="&&CALL:DEL_DSK&&EXIT /B
:PART_REMOVE
FOR %%a in (DISK_X PART_X LETT_X) DO (IF NOT DEFINED %%a EXIT /B)
(ECHO.select disk %DISK_X%&&ECHO.select partition %PART_X%&&ECHO.Remove letter=%LETT_X% noerr&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "DISK_X="&&SET "PART_X="&&SET "LETT_X="&&SET "SIZE_X="&&CALL:DEL_DSK&&EXIT /B
:PART_4000
FOR %%a in (DISK_X PART_X) DO (IF NOT DEFINED %%a EXIT /B)
(ECHO.select disk %DISK_X%&&ECHO.select partition %PART_X%&&ECHO.gpt attributes=0x4000000000000001&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "DISK_X="&&SET "PART_X="&&SET "LETT_X="&&SET "SIZE_X="&&CALL:DEL_DSK&&EXIT /B
:PART_8000
FOR %%a in (DISK_X PART_X) DO (IF NOT DEFINED %%a EXIT /B)
(ECHO.select disk %DISK_X%&&ECHO.select partition %PART_X%&&ECHO.gpt attributes=0x0000000000000000&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "DISK_X="&&SET "PART_X="&&SET "LETT_X="&&SET "SIZE_X="&&CALL:DEL_DSK&&EXIT /B
:PART_EFIX
FOR %%a in (DISK_X PART_X) DO (IF NOT DEFINED %%a EXIT /B)
(ECHO.select disk %DISK_X%&&ECHO.select partition %PART_X%&&ECHO.set id=c12a7328-f81f-11d2-ba4b-00a0c93ec93b override&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "DISK_X="&&SET "PART_X="&&SET "LETT_X="&&SET "SIZE_X="&&CALL:DEL_DSK&&EXIT /B
:PART_BAS
FOR %%a in (DISK_X PART_X) DO (IF NOT DEFINED %%a EXIT /B)
(ECHO.select disk %DISK_X%&&ECHO.select partition %PART_X%&&ECHO.set id=ebd0a0a2-b9e5-4433-87c0-68b6b72699c7 override&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "DISK_X="&&SET "PART_X="&&SET "LETT_X="&&SET "SIZE_X="&&CALL:DEL_DSK&&EXIT /B
:PART_PRIMARY
FOR %%a in (DISK_X) DO (IF NOT DEFINED %%a EXIT /B)
IF DEFINED SIZE_X SET "SIZE_X= size=%SIZE_X%"
(ECHO.select disk %DISK_X%&&ECHO.create partition primary%SIZE_X%&&ECHO.format quick fs=ntfs&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "DISK_X="&&SET "PART_X="&&SET "SIZE_X="&&CALL:DEL_DSK&&EXIT /B
:DISK_CLEAN
FOR %%a in (DISK_X) DO (IF NOT DEFINED %%a EXIT /B)
(ECHO.select disk %DISK_X%&&ECHO.clean&&ECHO.convert gpt&&ECHO.select partition 1&&ECHO.delete partition override&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL
SET "DISK_X="&&SET "PART_X="&&SET "LETT_X="&&SET "SIZE_X="&&CALL:DEL_DSK&&EXIT /B
:DEL_DSK
IF EXIST "$DSK" DEL /Q /F "$DSK">NUL
EXIT /B
:BOOT_FETCH
CALL:PAD_LINE&&CALL:BOXT1&&ECHO.&&ECHO.     File boot.sav doesn't exist. Press (%##%X%#$%) to copy from recovery&&ECHO.&&CALL:BOXB1&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL SET "PROMPT_SET=CONFIRM"&&CALL:PROMPT_SET
IF NOT "%CONFIRM%"=="X" EXIT /B
CALL:EFI_MOUNT&&CALL:PAD_LINE
ECHO. Copying %#@%boot.sav%#$%...&&COPY /Y "%EFI_LETTER%:\$.WIM" "%BOOT_FOLDER%\boot.sav">NUL 2>&1
CALL:EFI_UNMOUNT
EXIT /B
:CONFIRM
IF DEFINED ERROR EXIT /B
CALL:PAD_LINE&&CALL:BOXT1&&ECHO.&&ECHO.                  %XLR4%Are you sure?%#$% Press (%##%X%#$%) to proceed&&ECHO.&&CALL:BOXB1&&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL SET "PROMPT_SET=CONFIRM"&&CALL:PROMPT_SET
IF NOT "%CONFIRM%"=="X" SET "ERROR=1"
EXIT /B
:VDISK_CREATE
IF NOT DEFINED VDISK EXIT /B
IF NOT DEFINED VDISK_LTR SET "VDISK_LTR=ANY"
IF "%VDISK_LTR%"=="ANY" SET "$GET=VDISK_LTR"&&CALL:LETTER_ANY
FOR %%G in ("%VDISK%") DO (SET "VHDX_123=%%~nG%%~xG")
ECHO. Mounting vdisk %VHDX_123% letter %VDISK_LTR%...&&SET "VHDX_123="
IF NOT DEFINED VHDX_MB SET "VHDX_MB=25600"
(ECHO.create vdisk file="%VDISK%" maximum=%VHDX_MB% type=expandable&&ECHO.select vdisk file="%VDISK%"&&ECHO.attach vdisk&&ECHO.create partition primary&&ECHO.select partition 1&&ECHO.format fs=ntfs quick&&ECHO.assign letter=%VDISK_LTR% noerr&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "VHDX_MB="&&IF EXIST "$DSK*" DEL /Q /F "$DSK*">NUL 2>&1
IF EXIST "%VDISK_LTR%:\" SET "VDISK_ATTACHED=1"
EXIT /B
:VDISK_ATTACH
IF NOT DEFINED VDISK EXIT /B
IF NOT DEFINED VDISK_LTR SET "VDISK_LTR=ANY"
IF "%VDISK_LTR%"=="ANY" SET "$GET=VDISK_LTR"&&CALL:LETTER_ANY
FOR %%G in ("%VDISK%") DO (SET "VHDX_123=%%~nG%%~xG")
ECHO. Mounting vdisk %VHDX_123% letter %VDISK_LTR%...&&SET "VHDX_123="
SET "VDISK_SYS="&&(ECHO.Select vdisk file="%VDISK%"&&ECHO.attach vdisk&&ECHO.list vdisk&&ECHO.Exit)>"$DSK"
FOR /F "TOKENS=1-8* DELIMS=* " %%a IN ('DISKPART /s "$DSK"') DO (SET "DISK_NUM="&&IF "%%a"=="VDisk" IF EXIST "%%i" SET "DISK_NUM=%%d"&&SET "CAPS_SET=VDISK_QRY"&&SET "CAPS_VAR=%%i"&&CALL:CAPS_SET&&CALL:VDISK_CAPS)
IF EXIST "%VDISK_LTR%:\" SET "VDISK_ATTACHED=1"&&IF EXIST "%VDISK_LTR%:\WINDOWS" SET "VDISK_SYS=1"
SET "VDISK_PART="&&SET "VDISK_QRY="&&SET "DISK_NUM="&&IF EXIST "$DSK*" DEL /Q /F "$DSK*">NUL 2>&1
EXIT /B
:VDISK_CAPS
SET "CAPS_SET=VDISK"&&SET "CAPS_VAR=%VDISK%"&&CALL:CAPS_SET
IF NOT "%VDISK_QRY%"=="%VDISK%" EXIT /B
(ECHO.select disk %DISK_NUM%&&ECHO.list partition&&ECHO.Exit)>"$DSK"&&FOR /F "TOKENS=1-8* DELIMS=* " %%1 IN ('DISKPART /s "$DSK"') DO (IF "%%1"=="Partition" IF NOT "%%2"=="" IF NOT "%%2"=="###" SET "VDISK_PART=%%2")
IF DEFINED VDISK_PART (ECHO.Select vdisk file="%VDISK%"&&ECHO.select partition %VDISK_PART%&&ECHO.assign letter=%VDISK_LTR% noerr&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
EXIT /B
:VDISK_DETACH
IF NOT DEFINED VDISK EXIT /B
FOR %%G in ("%VDISK%") DO (SET "VHDX_123=%%~nG%%~xG")
ECHO. Unmounting vdisk %VHDX_123% letter %VDISK_LTR%...&&SET "VHDX_123="
(ECHO.Select vdisk file="%VDISK%"&&ECHO.Detach vdisk&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
IF NOT EXIST "%VDISK_LTR%:\" SET "VDISK_ATTACHED="
IF EXIST "$DSK*" DEL /Q /F "$DSK*">NUL 2>&1
EXIT /B
:LETTER_ANY
IF NOT DEFINED $GET EXIT /B
FOR %%G in (Z Y X W V U T S R Q P O N M L K J I H G F E D) DO (IF NOT EXIST "%%G:\" SET "%$GET%=%%G")
SET "$GET="&&EXIT /B
:DISKMGR_ERASE
IF DEFINED ERROR EXIT /B
FOR %%a in (DISK_NUMBER) DO (IF NOT DEFINED %%a EXIT /B)
FOR %%a in (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30) DO (IF "%DISK_NUMBER%"=="%%a" CALL SET "GET_DISK_ID=%%DISKID_%%a%%")
SET "DISK_X=%DISK_NUMBER%"&&CALL:DISK_CLEAN&&SET "DISK_X=%DISK_NUMBER%"&&SET "PART_X=1"&&SET "LETT_X=%TST_LETTER%"&&CALL:PART_ASSIGN
IF EXIST "%TST_LETTER%:\" SET "DISK_X=%DISK_NUMBER%"&&CALL:DISK_CLEAN
CALL:DISKMGR_CHANGEID>NUL 2>&1
IF NOT EXIST "%TST_LETTER%:\" SET "DISK_MSG=All partitions on Disk %DISK_NUMBER% have been erased."
IF EXIST "%TST_LETTER%:\" SET "DISK_MSG=%##%Disk %DISK_NUMBER% is currently in use - unplug disk - reboot into Windows - replug and try again.%#$%"
IF EXIST "%TST_LETTER%:\" SET "LETT_X=%TST_LETTER%"&&CALL:VOL_REMOVE
IF EXIST "%TST_LETTER%:\" SET "DISK_X=%DISK_NUMBER%"&&SET "PART_X=1"&&SET "LETT_X=%TST_LETTER%"&&CALL:PART_REMOVE
SET "TEST_X="&&EXIT /B
:DISK_UID_PROMPT
ECHO.                       Enter a new disk UID (%##%#%#$%) &&CALL:PAD_LINE&&CALL:PAD_PREV&&CALL:MENU_SELECT
IF NOT DEFINED SELECT SET "ERROR=1"&&EXIT /B
IF NOT DEFINED ERROR SET "GET_DISK_ID=%SELECT%"&&CALL:CONFIRM&&CALL:DISKMGR_CHANGEID
EXIT /B
:DISKMGR_CHANGEID
IF DEFINED ERROR EXIT /B
FOR %%a in (DISK_NUMBER GET_DISK_ID) DO (IF NOT DEFINED %%a EXIT /B)
SET "UID_XNT="&&FOR /F "DELIMS=" %%G in ('CMD.EXE /D /U /C ECHO.%GET_DISK_ID%^| FIND /V ""') do (CALL SET /A "UID_XNT+=1")
IF NOT "%UID_XNT%"=="36" SET "GET_DISK_ID=00000000-0000-0000-0000-000000000000"
SET "UID_X=%GET_DISK_ID%"&&SET "DISK_X=%DISK_NUMBER%"&&CALL:DISK_UID
EXIT /B
:HOST_AUTO
SET "HOST_ERROR="&&IF NOT DEFINED ARBIT_FLAG CLS&&ECHO.Querying disks...
IF EXIST "Z:\" (ECHO.select volume Z&&ECHO.remove letter=Z noerr&&ECHO.exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET /P DISK_TARGET=<"%PROG_FOLDER%\DISK_TARGET"
SET "HOST_TARGET=%DISK_TARGET%"
IF DEFINED ARBIT_FLAG CALL:DISK_DETECT>NUL 2>&1
IF NOT DEFINED ARBIT_FLAG SET "QUERY_X=1"&&CALL:DISK_DETECT
SET "DISK_X=%DISK_DETECT%"&&SET "PART_X=2"&&CALL:PART_8000&&SET "DISK_X=%DISK_DETECT%"&&SET "PART_X=2"&&SET "LETT_X=Z"&&CALL:PART_ASSIGN
IF EXIST "Z:\" IF NOT EXIST "Z:\$" MD "Z:\$">NUL 2>&1
IF EXIST "Z:\$" IF NOT EXIST "Z:\$\deploy.cmd" COPY "X:\$\deploy.cmd" "Z:\$">NUL 2>&1
IF EXIST "Z:\$\settings.ini" COPY /Y "Z:\$\settings.ini" "%PROG_FOLDER%">NUL 2>&1
IF NOT EXIST "Z:\$" IF NOT DEFINED ARBIT_FLAG SET "ARBIT_FLAG=1"&&GOTO:HOST_AUTO
SET "ARBIT_FLAG="&&IF EXIST "Z:\$" SET "PROG_SOURCE=Z:\$"&&SET "HOST_NUMBER=%DISK_DETECT%"
IF NOT DEFINED DISK_DETECT SET "HOST_ERROR=1"&&SET "DISK_TARGET="
EXIT /B
:EFI_MOUNT
IF NOT DEFINED DISK_TARGET SET "EFI_LETTER="&&EXIT /B
SET "$GET=EFI_LETTER"&&CALL:LETTER_ANY
SET /P DISK_TARGET=<"%PROG_FOLDER%\DISK_TARGET"
SET "HOST_TARGET=%DISK_TARGET%"&&CALL:DISK_DETECT>NUL 2>&1
IF NOT DEFINED DISK_DETECT SET "ERROR=1"&&ECHO. %XLR2%ERROR:%#$% EFI target disk could not be found.&&SET "EFI_LETTER="&&EXIT /B
SET "DISK_X=%DISK_DETECT%"&&SET "PART_X=1"&&CALL:PART_BAS
SET "DISK_X=%DISK_DETECT%"&&SET "PART_X=1"&&SET "LETT_X=%EFI_LETTER%"&&CALL:PART_ASSIGN
IF NOT EXIST "%EFI_LETTER%:\" SET "ERROR=1"&&ECHO. %XLR2%ERROR:%#$% EFI %EFI_LETTER%:\ could not be mounted.&&SET "EFI_LETTER="
EXIT /B
:EFI_UNMOUNT
IF NOT DEFINED DISK_TARGET SET "EFI_LETTER="
IF NOT EXIST "%EFI_LETTER%:\" SET "EFI_LETTER="
IF NOT DEFINED EFI_LETTER EXIT /B
SET "DISK_X=%DISK_DETECT%"&&SET "PART_X=1"&&SET "LETT_X=%EFI_LETTER%"&&CALL:PART_REMOVE
SET "DISK_X=%DISK_DETECT%"&&SET "PART_X=1"&&CALL:PART_EFIX
IF EXIST "%EFI_LETTER%:\" SET "ERROR=1"&&ECHO. %XLR2%ERROR:%#$% EFI %EFI_LETTER%:\ could not dismount.
SET "EFI_LETTER="&&EXIT /B
:DISK_MENU
CLS&&SET "ERROR="&&SET "DISK_TARGET="&&CALL:PAD_LINE&&SET "DISK_GET=1"&&CALL:DISK_LIST
CALL:PAD_LINE&&CALL:PAD_PREV&&SET "PROMPT_SET=DISK_NUMBER"&&CALL:PROMPT_SET
SET "CHECK=NUM"&&SET "CHECK_VAR=%DISK_NUMBER%"&&CALL:CHECK&&IF NOT DEFINED DISK_%DISK_NUMBER% SET "ERROR=1"
IF DEFINED ERROR EXIT /B
CALL SET "DISK_TARGET=%%DISKID_%DISK_NUMBER%%%"&&CALL:DISK_DETECT>NUL 2>&1
FOR %%G in (DISK_NUMBER DISK_TARGET) DO (IF NOT DEFINED %%G SET "ERROR=1")
IF "%PROG_MODE%"=="RAMDISK" IF "%HOST_NUMBER%"=="%DISK_NUMBER%" SET "ERROR=1"
IF "%PROG_MODE%"=="RAMDISK" IF "%HOST_TARGET%"=="%DISK_TARGET%" SET "ERROR=1"
EXIT /B
:DISK_LIST
CALL:BOXT1
IF DEFINED QUERY_MSG ECHO.%QUERY_MSG%
(ECHO.LIST DISK&&ECHO.Exit)>"$DSK"&&FOR /F "TOKENS=1-5 SKIP=8 DELIMS= " %%a in ('DISKPART /s "$DSK"') DO (
IF "%%a"=="Disk" IF NOT "%%b"=="###" SET "DISKVND="&&(ECHO.select disk %%b&&ECHO.detail disk&&ECHO.list partition&&ECHO.Exit)>"$DSK"&&SET "LTRX=X"&&FOR /F "TOKENS=1-9 SKIP=6 DELIMS={}: " %%1 in ('DISKPART /s "$DSK"') DO (
IF "%%1 %%2"=="Disk %%b" ECHO.&&ECHO.   %#@%Disk%#$% ^(%##%%%b%#$%^)
IF NOT "%%1 %%2"=="Disk %%b" IF NOT DEFINED DISKVND SET "DISKVND=$"&&ECHO.   %%1 %%2 %%3 %%4 %%5
IF "%%1"=="Type" ECHO.    %#@%Type%#$% = %%2
IF "%%1 %%2"=="Disk ID" ECHO.    %#@%UID%#$%  = %%3
IF "%%1 %%2 %%3"=="Pagefile Disk Yes" ECHO. %XLR2%  Active Pagefile%#$%
IF "%%1"=="Partition" IF NOT "%%2"=="###" SET "PARTX=%%2"&&SET "SIZEX=%%4 %%5"&&(ECHO.select disk %%b&&ECHO.select partition %%2&&ECHO.detail partition&&ECHO.Exit)>"$DSK"&&SET "LTRX="&&FOR /F "TOKENS=1-9 SKIP=6 DELIMS=* " %%A in ('DISKPART /s "$DSK"') DO (IF "%%A"=="Volume" IF NOT "%%B"=="###" SET "LTRX=%%C"&&CALL:DISK_CHECK)
IF NOT DEFINED LTRX ECHO.    %#@%Part %%2%#$% Vol * %%4 %%5))
IF DEFINED DISK_GET CALL:DISK_DETECT>NUL 2>&1
ECHO.&&CALL:BOXB1
FOR %%a in (PASS LTRX PARTX SIZEX QUERY_MSG DISK_GET) DO (SET "%%a=")
DEL /Q /F "$DSK*">NUL 2>&1
EXIT /B
:DISK_CHECK
SET "PASS="&&FOR %%$ in (A B C D E F G H I J K L M N O P Q R S T U V W X Y Z) DO (IF "%%$"=="%LTRX%" SET "PASS=1"&&ECHO.    %#@%Part %PARTX%%#$% Vol %#@%%LTRX%%#$% %SIZEX%)
IF NOT DEFINED PASS ECHO.    %#@%Part %PARTX%%#$% Vol * %SIZEX%
EXIT /B
:DISK_DETECT
FOR /F "TOKENS=1 DELIMS=:" %%G in ("%SystemDrive%") DO (SET "SYS_VOLUME=%%G")
FOR /F "TOKENS=1 DELIMS=:" %%G in ("%PROG_SOURCE%") DO (SET "PROG_VOLUME=%%G")
SET "DISK_DETECT="&&FOR %%a in (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30) DO (IF DEFINED DISK_%%a SET "DISK_%%a="&&SET "DISKID_%%a=")
(ECHO.LIST DISK&&ECHO.Exit)>"$DSK"&&FOR /F "TOKENS=1,2,4 SKIP=8 DELIMS= " %%a in ('DISKPART /s "$DSK"') DO (IF "%%a"=="Disk" IF NOT "%%b"=="###" SET "DISK_%%b="&&(ECHO.select disk %%b&&ECHO.detail disk&&ECHO.list partition&&ECHO.Exit)>"$DSK"&&FOR /F "TOKENS=1-9 SKIP=6 DELIMS={}: " %%1 in ('DISKPART /s "$DSK"') DO (
IF "%%1 %%2"=="Disk %%b" SET "DISK_%%b=%%b"
IF "%%1 %%2"=="Disk ID" SET "DISKID_%%b=%%3"&&IF "%%3"=="%DISK_TARGET%" SET "DISK_DETECT=%%b"
IF "%%1 %%2"=="Disk ID" IF DEFINED QUERY_X ECHO. Getting info for disk uid %##%%%3%#$%...
IF "%%1 %%2 %%3"=="Pagefile Disk Yes" SET "DISK_%%b="
IF "%%2 %%3 %%4"=="File Backed Virtual" SET "DISK_%%b=VDISK"
IF "%%1 %%3"=="Volume %SYS_VOLUME%" SET "DISK_%%b="
IF "%%1 %%3"=="Volume %PROG_VOLUME%" SET "DISK_%%b="
IF "%%1 %%3"=="Volume Z" IF "%PROG_MODE%"=="RAMDISK" SET "HOST_VOLUME=%%2"))
IF DEFINED QUERY_X SET "QUERY_X="&&CLS
DEL /Q /F "$DSK*">NUL 2>&1
EXIT /B
:VHDX_CHECK
CLS&&IF "%$VHDX%"=="X" SET "MENUT0=                             Boot Creator"&&SET "MENUT1= "&&SET "MENUT2=  %#@%AVAILABLE VHDXs:%#$%"&&SET "MENUT3= "&&SET "MENUT4= ( %##%.%#$% ) File Operation"&&SET "MENUB0= "&&SET "PICK=VHDX"&&CALL:FILE_PICK
IF "%$VHDX%"=="X" IF "%SELECT%"=="." SET "FILE_TYPE=VHDX"&&CALL:BASIC_FILE&SET "ERROR=1"&EXIT /B
IF NOT "%$VHDX%"=="X" SET "MENUT0=                           Boot Menu Editor"&&SET "MENUT1= "&&SET "MENUT2=  %#@%MAIN FOLDER VHDXs:%#$%"&&SET "MENUT3= "&&SET "MENUT4= ( %##%.%#$% ) File Operation"&&SET "MENUB0= "&&SET "PICK=CUST"&&SET "$FOLD0=%PROG_SOURCE%"&&SET "$FILT0=*.VHDX"&&CALL:FILE_PICK
IF NOT "%$VHDX%"=="X" IF "%SELECT%"=="." SET "FILE_TYPE=MAIN"&&CALL:BASIC_FILE&SET "ERROR=1"&EXIT /B
IF NOT DEFINED $PICK SET "VHDX_SLOT%$VHDX%="&&SET "$VHDX="&&EXIT /B
SET "CHAR_STR=%$TRUMP%"&&SET "CHAR_CHK= "&&CALL:CHAR_CHK
IF DEFINED CHAR_FLG CALL:PAD_LINE&&CALL:BOXT1&&ECHO.&&ECHO. Remove the space from the VHDX name, then try again.&&ECHO.&&CALL:BOXB1&&CALL:PAD_LINE&&SET "VHDX_SLOT%$VHDX%="&&CALL:PAUSED
IF NOT DEFINED CHAR_FLG SET "VHDX_SLOT%$VHDX%=%$TRUMP%"
SET "$VHDX="
EXIT /B
:FIND_INDEX
IF NOT DEFINED IMAGEFILE EXIT /B
SET "IMAGEINDEX="&&CALL SET /A "INDEX_TMP+=1"
FOR /F "TOKENS=5 SKIP=5 DELIMS=<> " %%a in ('DISM /ENGLISH /GET-IMAGEINFO /IMAGEFILE:"%IMAGEFILE%" /INDEX:%INDEX_TMP% 2^>NUL') DO (IF "%%a"=="%INDEX_WORD%" SET "IMAGEINDEX=%INDEX_TMP%"&&GOTO:FIND_INDEX_BREAK)
IF NOT DEFINED IMAGEINDEX IF NOT "%INDEX_TMP%" EQU "20" GOTO:FIND_INDEX
:FIND_INDEX_BREAK
SET "IMAGEFILE="&&SET "INDEX_TMP="&&SET "INDEX_WORD="
EXIT /B
:PART_EFI1
FOR %%a in (DISK_X) DO (IF NOT DEFINED %%a EXIT /B)
IF NOT DEFINED SIZE_X SET "SIZE_X=1024"
(ECHO.select disk %DISK_X%&&ECHO.create partition EFI size=%SIZE_X%&&ECHO.format quick fs=fat32 label="ESP"&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "PART_X=1"&&SET "LETT_X=%EFI_LETTER%"&&CALL:PART_ASSIGN
IF NOT EXIST "%EFI_LETTER%:\" SET "EFI=2"
SET "DISK_X="&&SET "PART_X="&&SET "LETT_X="&&SET "SIZE_X="&&CALL:DEL_DSK&&EXIT /B
:PART_EFI2
FOR %%a in (DISK_X) DO (IF NOT DEFINED %%a EXIT /B)
IF NOT DEFINED SIZE_X SET "SIZE_X=1024"
(ECHO.select disk %DISK_X%&&ECHO.create partition primary size=%SIZE_X%&&ECHO.format quick fs=fat32 label="ESP"&&ECHO.Exit)>"$DSK"&&DISKPART /s "$DSK">NUL 2>&1
SET "PART_X=1"&&SET "LETT_X=%EFI_LETTER%"&&CALL:PART_ASSIGN
SET "DISK_X="&&SET "PART_X="&&SET "LETT_X="&&SET "SIZE_X="&&CALL:DEL_DSK&&EXIT /B
:PART_CREATE
SET "SIZE_X="&&IF NOT DEFINED EFI SET "EFI=1"
IF "%EFI%"=="1" CALL:DISKMGR_ERASE&&SET "DISK_X=%DISK_NUMBER%"&&CALL:PART_EFI1
IF "%EFI%"=="2" CALL:DISKMGR_ERASE&&SET "DISK_X=%DISK_NUMBER%"&&CALL:PART_EFI2
IF EXIST "%EFI_LETTER%:\" (IF DEFINED HOST_SIZE SET "CHECK_VAR=%HOST_SIZE%"&&SET "CHECK=NUM"&&CALL:CHECK>NUL 2>&1
IF DEFINED HOST_SIZE IF DEFINED ERROR SET "ERROR="&&IF NOT DEFINED RETRY_PART1 IF NOT DEFINED RETRY_PART2 IF NOT DEFINED RETRY_PART3 ECHO. %XLR4%ERROR:%#$% Invalid host partition size, using available free space.&&SET "HOST_SIZE="
IF DEFINED HOST_SIZE SET "SIZE_X=%HOST_SIZE%"
SET "DISK_X=%DISK_NUMBER%"&&CALL:PART_PRIMARY
SET "DISK_X=%DISK_NUMBER%"&&SET "PART_X=2"&&SET "LETT_X=%PRI_LETTER%"&&CALL:PART_ASSIGN
IF DEFINED HOST_SIZE IF EXIST "%PRI_LETTER%:\" SET "DISK_X=%DISK_NUMBER%"&&CALL:PART_PRIMARY
IF DEFINED HOST_SIZE IF EXIST "%PRI_LETTER%:\" SET "DISK_X=%DISK_NUMBER%"&&SET "PART_X=3"&&SET "LETT_X=%TST_LETTER%"&&CALL:PART_ASSIGN)
IF EXIST "%EFI_LETTER%:\" IF EXIST "%PRI_LETTER%:\" SET "RETRY_PART1="&&SET "RETRY_PART2="&&SET "RETRY_PART3="&&SET "EFI="&&EXIT /B
FOR %%a in (1 2 3) DO (IF NOT DEFINED RETRY_PART%%a SET "RETRY_PART%%a=1"&&SET "EFI="&&GOTO:PART_CREATE)
ECHO.                     %XLR2%The disk is currently in use.%#$%&&ECHO.     A malfunctioning disk, or if a program located on the disk&&ECHO.            is currently in use can also cause an error.&&ECHO.  For best results it is recommended to use an external nvme drive.&&ECHO.    Unplug the USB disk and/or reboot if this continues to occur.&&ECHO.
SET "RETRY_PART1="&&SET "RETRY_PART2="&&SET "RETRY_PART3="&&SET "EFI="&&ECHO.&&SET "ERROR=1"&&EXIT /B
:BOOT_CREATOR_START
CLS&&CALL:BOXT2&&ECHO.           %#@%BOOT CREATOR START:%#$%  %DATE%  %TIME%&&ECHO.
SET "DISK_MSG="&&DISM /cleanup-MountPoints>NUL 2>&1
SET "CHAR_STR=%VHDX_SLOTX%"&&SET "CHAR_CHK= "&&CALL:CHAR_CHK
IF DEFINED CHAR_FLG SET "ERROR=1"&&ECHO. %XLR4%ERROR:%#$% Remove the space from the VHDX name, then try again.&&GOTO:BOOT_FINISH
SET "UID_XNT="&&FOR /F "DELIMS=" %%G in ('CMD.EXE /D /U /C ECHO.%DISK_TARGET%^| FIND /V ""') do (CALL SET /A "UID_XNT+=1")
IF NOT "%UID_XNT%"=="36" (ECHO. Converting to GPT..&&CALL:DISKMGR_ERASE&&CALL:DISK_DETECT>NUL 2>&1
SET "DISK_TARGET="&&FOR %%a in (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30) DO (IF "%DISK_NUMBER%"=="%%a" CALL SET "DISK_TARGET=%%DISKID_%%a%%"&&CALL ECHO. Assigning new disk uid %%DISKID_%%a%%...&&CALL:DISK_DETECT>NUL 2>&1))
SET "UID_XNT="&&FOR /F "DELIMS=" %%G in ('CMD.EXE /D /U /C ECHO.%DISK_TARGET%^| FIND /V ""') do (CALL SET /A "UID_XNT+=1")
IF NOT "%UID_XNT%"=="36" ECHO. %XLR2%ERROR:%#$% Disk could not be converted to GPT.&&GOTO:BOOT_FINISH
FOR %%a in (DISK_DETECT DISK_NUMBER DISK_TARGET) DO (IF NOT DEFINED %%a ECHO. %XLR2%ERROR:%#$% Unable to query disk number or uid.&&GOTO:BOOT_FINISH)
SET "EFI_LETTER="&&FOR %%G in (Z Y X W V U T S R Q P O N M L K J I H G F E D) DO (IF NOT EXIST "%%G:\" SET "EFI_LETTER=%%G")
SET "PRI_LETTER="&&FOR %%G in (Z Y X W V U T S R Q P O N M L K J I H G F E D) DO (IF NOT EXIST "%%G:\" IF NOT "%%G"=="%EFI_LETTER%" SET "PRI_LETTER=%%G")
SET "TST_LETTER="&&FOR %%G in (Z Y X W V U T S R Q P O N M L K J I H G F E D) DO (IF NOT EXIST "%%G:\" IF NOT "%%G"=="%EFI_LETTER%" IF NOT "%%G"=="%PRI_LETTER%" SET "TST_LETTER=%%G")
ECHO. Creating partitions on disk uid %DISK_TARGET%...&&CALL:PART_CREATE
IF DEFINED ERROR GOTO:BOOT_CLEANUP
ECHO. Mounting temporary vdisk...&&MD "%PRI_LETTER%:\$\Scratch">NUL 2>&1
SET "VDISK=%PRI_LETTER%:\$\Scratch\scratch.vhdx"&&SET "VDISK_LTR=ANY"&&CALL:VDISK_CREATE>NUL 2>&1
IF EXIST "%BOOT_FOLDER%\BOOT.SAV" ECHO. Extracting boot-media. Using boot.sav located in folder...&&COPY /Y "%BOOT_FOLDER%\boot.sav" "%PRI_LETTER%:\$\boot.wim">NUL 2>&1
SET "IMAGEFILE=%PRI_LETTER%:\$\boot.wim"&&SET "INDEX_WORD=Setup"&&CALL:FIND_INDEX
SET "IMAGEFILE=%PRI_LETTER%:\$\boot.wim"&&SET "APPLYDIR=%VDISK_LTR%:"&&IF NOT DEFINED IMAGEINDEX SET "IMAGEINDEX=1"
DISM /ENGLISH /APPLY-IMAGE /IMAGEFILE:"%IMAGEFILE%" /INDEX:%IMAGEINDEX% /APPLYDIR:"%APPLYDIR%"&ECHO.
MOVE /Y "%PRI_LETTER%:\$\boot.wim" "%PRI_LETTER%:\$\boot.sav">NUL 2>&1
IF NOT EXIST "%VDISK_LTR%:\Windows" SET "ERROR=1"&&ECHO. %XLR2%ERROR:%#$% Mount failure, Index %IMAGEINDEX% &&GOTO:BOOT_CLEANUP
MD "%APPLYDIR%\$">NUL 2>&1
ECHO.%DISK_TARGET%>"%APPLYDIR%\$\DISK_TARGET"
COPY /Y "%PROG_SOURCE%\deploy.cmd" "%APPLYDIR%\$">NUL&COPY /Y "%PROG_SOURCE%\deploy.cmd" "%PRI_LETTER%:\$">NUL&COPY /Y "%PROG_SOURCE%\settings.ini" "%PRI_LETTER%:\$">NUL
FOR %%a in (Boot EFI\Boot EFI\Microsoft\Boot) DO (MD %EFI_LETTER%:\%%a>NUL 2>&1)
IF EXIST "%BOOT_FOLDER%\boot.sdi" ECHO. Using boot.sdi located in folder, for efi image boot support.&&COPY /Y "%BOOT_FOLDER%\boot.sdi" "%EFI_LETTER%:\Boot">NUL
IF NOT EXIST "%BOOT_FOLDER%\boot.sdi" COPY /Y "%APPLYDIR%\Windows\Boot\DVD\EFI\boot.sdi" "%EFI_LETTER%:\Boot">NUL 2>&1
IF NOT EXIST "%EFI_LETTER%:\Boot\boot.sdi" SET "ERROR=1"&&ECHO. %XLR2%ERROR:%#$% boot.sdi missing.&&GOTO:BOOT_CLEANUP
IF EXIST "%BOOT_FOLDER%\bootmgfw.efi" ECHO. Using bootmgfw.efi located in folder, for the efi bootloader.&&COPY /Y "%BOOT_FOLDER%\bootmgfw.efi" "%EFI_LETTER%:\EFI\Boot\bootx64.efi">NUL
IF NOT EXIST "%BOOT_FOLDER%\bootmgfw.efi" COPY /Y "%APPLYDIR%\Windows\Boot\EFI\bootmgfw.efi" "%EFI_LETTER%:\EFI\Boot\bootx64.efi">NUL 2>&1
IF NOT EXIST "%EFI_LETTER%:\EFI\Boot\bootx64.efi" SET "ERROR=1"&&ECHO. %XLR2%ERROR:%#$% bootmgfw.efi missing.&&GOTO:BOOT_CLEANUP
IF EXIST "%APPLYDIR%\setup.exe" DEL /Q /F "\\?\%APPLYDIR%\setup.exe">NUL 2>&1
COPY /Y "%APPLYDIR%\Windows\System32\config\ELAM" "%TEMP%\BCD">NUL 2>&1
(ECHO.[LaunchApp]&&ECHO.AppPath=X:\$\deploy.cmd)>"%APPLYDIR%\Windows\System32\winpeshl.ini"
SET "VHDX_SLOTZ=%VHDX_SLOT0%"&&SET "VHDX_SLOT0=%VHDX_SLOTX%"&&CALL:BCD_CREATE>NUL 2>&1
SET "VHDX_SLOT0=%VHDX_SLOTZ%"&&SET "VHDX_SLOTZ="&&IF NOT EXIST "%EFI_LETTER%:\EFI\Microsoft\Boot\BCD" SET "ERROR=1"&&ECHO. %XLR2%ERROR:%#$% BCD missing.&&GOTO:BOOT_CLEANUP
ECHO. Saving boot-media...&&SET "IMAGEFILE=%EFI_LETTER%:\$.WIM"&&SET "CAPTUREDIR=%VDISK_LTR%:"
DISM /ENGLISH /CAPTURE-IMAGE /IMAGEFILE:"%IMAGEFILE%" /CAPTUREDIR:"%CAPTUREDIR%" /NAME:NAME /CheckIntegrity /Verify /Bootable&ECHO.&SET "IMAGEFILE="
:BOOT_CLEANUP
ECHO. Unmounting temporary vdisk...&&SET "VDISK=%PRI_LETTER%:\$\Scratch\scratch.vhdx"&&CALL:VDISK_DETACH>NUL 2>&1
ECHO. Unmounting EFI...&&IF EXIST "%PRI_LETTER%:\$\Scratch" RD /S /Q "%PRI_LETTER%:\$\Scratch">NUL 2>&1
SET "DISK_X=%DISK_DETECT%"&&SET "PART_X=1"&&SET "LETT_X=%EFI_LETTER%"&&CALL:PART_REMOVE
SET "DISK_X=%DISK_DETECT%"&&SET "PART_X=1"&&CALL:PART_EFIX
IF NOT DEFINED ERROR IF DEFINED VHDX_SLOTX IF EXIST "%IMAGE_FOLDER%\%VHDX_SLOTX%" IF EXIST "%PRI_LETTER%:\$" ECHO. Copying %VHDX_SLOTX%...&&COPY /Y "%IMAGE_FOLDER%\%VHDX_SLOTX%" "%PRI_LETTER%:\$">NUL 2>&1
IF DEFINED VHDX_SLOTX IF NOT EXIST "%IMAGE_FOLDER%\%VHDX_SLOTX%" ECHO. No virtual hard disk file was selected.
:BOOT_FINISH
SET "IMAGEFILE="&&SET "IMAGEINDEX="&&SET "EFI_LETTER="&&SET "PRI_LETTER="&&SET "TST_LETTER="&&IF "%PROG_MODE%"=="RAMDISK" CALL:HOST_AUTO>NUL 2>&1
CALL:DEL_DSK&&ECHO.&&ECHO.            %#@%BOOT CREATOR END:%#$%  %DATE%  %TIME%&&CALL:BOXB2
EXIT /B
:BCD_CREATE
IF NOT DEFINED BOOT_TIMEOUT SET "BOOT_TIMEOUT=5"
SET "BCD_KEY=BCD00000001"&&SET "BCD_FILE=%TEMP%\$BCD"
FOR %%a in (BCD BCD1 $BCD) DO (IF EXIST "%TEMP%\%%a" DEL /Q /F "%TEMP%\%%a" >NUL)
BCDEDIT.EXE /createstore "%BCD_FILE%"
BCDEDIT.EXE /STORE "%BCD_FILE%" /create {bootmgr}
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET {bootmgr} description "Boot Manager"
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET {bootmgr} device boot
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET {bootmgr} timeout %BOOT_TIMEOUT%
FOR /f "TOKENS=2 DELIMS={}" %%a in ('BCDEDIT.EXE /STORE "%BCD_FILE%" /create /device') do SET "RAMDISK={%%a}"
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %RAMDISK% ramdisksdidevice boot
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %RAMDISK% ramdisksdipath \boot\boot.sdi
FOR /f "TOKENS=2 DELIMS={}" %%a in ('BCDEDIT.EXE /STORE "%BCD_FILE%" /create /application osloader') do SET "BCD_GUID={%%a}"
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% systemroot \Windows
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% detecthal Yes
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% winpe Yes
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% osdevice ramdisk=[boot]\$.WIM,%RAMDISK%
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% device ramdisk=[boot]\$.WIM,%RAMDISK%
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% path \windows\system32\winload.efi
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% description "Recovery"
BCDEDIT.EXE /STORE "%BCD_FILE%" /displayorder %BCD_GUID% /addlast
FOR %%a in (9 8 7 6 5 4 3 2 1 0) DO (CALL SET "BCD_NAME=%%VHDX_SLOT%%a%%"&&CALL:BCD_VHDX)
REG UNLOAD HKLM\%BCD_KEY%>NUL 2>&1
REG LOAD HKLM\%BCD_KEY% "%TEMP%\$BCD">NUL 2>&1
REG EXPORT HKLM\%BCD_KEY% "%TEMP%\BCD1"
REG UNLOAD HKLM\%BCD_KEY%>NUL 2>&1
SET "BCD_FILE=%TEMP%\BCD"&&IF NOT EXIST "%TEMP%\BCD" COPY /Y "%WINDIR%\System32\config\ELAM" "%TEMP%\BCD">NUL 2>&1
REG LOAD HKLM\%BCD_KEY% "%BCD_FILE%">NUL 2>&1
REG IMPORT "%TEMP%\BCD1" >NUL 2>&1
REG.exe add "HKLM\%BCD_KEY%\Description" /v "KeyName" /t REG_SZ /d "%BCD_KEY%" /f>NUL 2>&1
REG.exe add "HKLM\%BCD_KEY%\Description" /v "System" /t REG_DWORD /d "1" /f>NUL 2>&1
REG.exe add "HKLM\%BCD_KEY%\Description" /v "TreatAsSystem" /t REG_DWORD /d "1" /f>NUL 2>&1
REG.exe delete "HKLM\%BCD_KEY%" /v "FirmwareModified" /f>NUL 2>&1
REG UNLOAD HKLM\%BCD_KEY%>NUL 2>&1
IF EXIST "%BCD_FILE%" COPY /Y "%BCD_FILE%" "%EFI_LETTER%:\EFI\Microsoft\Boot\BCD">NUL 2>&1
FOR %%a in (BCD BCD1 $BCD) DO (IF EXIST "%TEMP%\%%a" DEL /Q /F "%TEMP%\%%a" >NUL)
SET "BCD_GUID="&&SET "BCD_FILE="&&SET "BCD_KEY="&&SET "BCD_NAME="&&EXIT /B
:BCD_VHDX
IF NOT DEFINED BCD_NAME EXIT /B
IF "%BCD_NAME%"=="SELECT" EXIT /B
FOR /f "TOKENS=3" %%a in ('BCDEDIT.EXE /STORE "%BCD_FILE%" /create /application osloader') do SET "BCD_GUID=%%a"
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% device vhd=[locate]\$\%BCD_NAME%
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% path \Windows\SYSTEM32\winload.efi
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% osdevice vhd=[locate]\$\%BCD_NAME%
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% systemroot \Windows
BCDEDIT.EXE /STORE "%BCD_FILE%" /SET %BCD_GUID% description "%BCD_NAME%"
BCDEDIT.EXE /STORE "%BCD_FILE%" /displayorder %BCD_GUID% /addfirst
EXIT /B
:BCD_REBUILD
ECHO. Saving Boot Menu...&&CALL:EFI_MOUNT
IF NOT DEFINED ERROR CALL:BCD_CREATE>NUL 2>&1
CALL:EFI_UNMOUNT&&ECHO. Done.
EXIT /B
:QUIT
CALL:SETS_HANDLER>NUL 2>&1
:CLEAN_EXIT
COLOR&&TITLE C:\Windows\system32\CMD.exe&&CD /D "%ORIG_CD%"
IF "%PROG_MODE%"=="RAMDISK" EXIT 0&&EXIT 0